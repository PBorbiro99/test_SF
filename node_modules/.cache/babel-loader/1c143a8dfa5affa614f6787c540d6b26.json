{"ast":null,"code":"var _jsxFileName = \"D:\\\\SiteSF_React\\\\src\\\\components\\\\Carousel1.js\";\nimport clsx from 'clsx';\nimport React from 'react';\nimport throttle from 'lodash.throttle';\nimport debounce from 'lodash.debounce';\nimport isEqual from 'lodash.isequal';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { LEFT, RIGHT, UP, DOWN } from 'react-swipeable';\nimport { arrayOf, bool, func, number, oneOf, shape, string } from 'prop-types';\nimport SVG from './SVG';\nimport SwipeWrapper from './SwipeWrapper';\nconst screenChangeEvents = ['fullscreenchange', 'MSFullscreenChange', 'mozfullscreenchange', 'webkitfullscreenchange'];\nconst imageSetType = arrayOf(shape({\n  srcSet: string,\n  media: string\n}));\n\nfunction isEnterOrSpaceKey(event) {\n  const key = parseInt(event.keyCode || event.which || 0, 10);\n  const ENTER_KEY_CODE = 66;\n  const SPACEBAR_KEY_CODE = 62;\n  return key === ENTER_KEY_CODE || key === SPACEBAR_KEY_CODE;\n}\n\nexport default class ImageGallery extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentIndex: props.startIndex,\n      thumbsTranslate: 0,\n      currentSlideOffset: 0,\n      galleryWidth: 0,\n      thumbnailsWrapperWidth: 0,\n      thumbnailsWrapperHeight: 0,\n      isFullscreen: false,\n      isPlaying: false\n    };\n    this.loadedImages = {};\n    this.imageGallery = React.createRef();\n    this.thumbnailsWrapper = React.createRef();\n    this.thumbnails = React.createRef();\n    this.imageGallerySlideWrapper = React.createRef(); // bindings\n\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleMouseDown = this.handleMouseDown.bind(this);\n    this.handleOnSwiped = this.handleOnSwiped.bind(this);\n    this.handleScreenChange = this.handleScreenChange.bind(this);\n    this.handleSwiping = this.handleSwiping.bind(this);\n    this.onThumbnailMouseLeave = this.onThumbnailMouseLeave.bind(this);\n    this.handleImageError = this.handleImageError.bind(this);\n    this.pauseOrPlay = this.pauseOrPlay.bind(this);\n    this.renderThumbInner = this.renderThumbInner.bind(this);\n    this.renderItem = this.renderItem.bind(this);\n    this.slideLeft = this.slideLeft.bind(this);\n    this.slideRight = this.slideRight.bind(this);\n    this.toggleFullScreen = this.toggleFullScreen.bind(this);\n    this.togglePlay = this.togglePlay.bind(this); // Used to update the throttle if slideDuration changes\n\n    this.unthrottledSlideToIndex = this.slideToIndex;\n    this.slideToIndex = throttle(this.unthrottledSlideToIndex, props.slideDuration, {\n      trailing: false\n    });\n\n    if (props.lazyLoad) {\n      this.lazyLoaded = [];\n    }\n  }\n\n  componentDidMount() {\n    const {\n      autoPlay,\n      useWindowKeyDown\n    } = this.props;\n\n    if (autoPlay) {\n      this.play();\n    }\n\n    if (useWindowKeyDown) {\n      window.addEventListener('keydown', this.handleKeyDown);\n    } else {\n      this.imageGallery.current.addEventListener('keydown', this.handleKeyDown);\n    }\n\n    window.addEventListener('mousedown', this.handleMouseDown);\n    this.initResizeObserver(this.imageGallerySlideWrapper);\n    this.addScreenChangeEvent();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      items,\n      lazyLoad,\n      slideDuration,\n      slideInterval,\n      startIndex,\n      thumbnailPosition,\n      showThumbnails,\n      useWindowKeyDown\n    } = this.props;\n    const {\n      currentIndex\n    } = this.state;\n    const itemsSizeChanged = prevProps.items.length !== items.length;\n    const itemsChanged = !isEqual(prevProps.items, items);\n    const startIndexUpdated = prevProps.startIndex !== startIndex;\n    const thumbnailsPositionChanged = prevProps.thumbnailPosition !== thumbnailPosition;\n    const showThumbnailsChanged = prevProps.showThumbnails !== showThumbnails;\n\n    if (slideInterval !== prevProps.slideInterval || slideDuration !== prevProps.slideDuration) {\n      // refresh setInterval\n      this.pause();\n      this.play();\n    }\n\n    if (thumbnailsPositionChanged) {\n      // re-initialize resizeObserver because slides was unmounted and mounted again\n      this.removeResizeObserver();\n      this.initResizeObserver(this.imageGallerySlideWrapper);\n    }\n\n    if (itemsSizeChanged || showThumbnailsChanged) {\n      this.handleResize();\n    }\n\n    if (prevState.currentIndex !== currentIndex) {\n      this.slideThumbnailBar(prevState.currentIndex);\n    } // if slideDuration changes, update slideToIndex throttle\n\n\n    if (prevProps.slideDuration !== slideDuration) {\n      this.slideToIndex = throttle(this.unthrottledSlideToIndex, slideDuration, {\n        trailing: false\n      });\n    }\n\n    if (lazyLoad && (!prevProps.lazyLoad || itemsChanged)) {\n      this.lazyLoaded = [];\n    }\n\n    if (useWindowKeyDown !== prevProps.useWindowKeyDown) {\n      if (useWindowKeyDown) {\n        this.imageGallery.current.removeEventListener('keydown', this.handleKeyDown);\n        window.addEventListener('keydown', this.handleKeyDown);\n      } else {\n        window.removeEventListener('keydown', this.handleKeyDown);\n        this.imageGallery.current.addEventListener('keydown', this.handleKeyDown);\n      }\n    }\n\n    if (startIndexUpdated || itemsChanged) {\n      // TODO: this should be fix/removed\n      this.setState({\n        currentIndex: startIndex\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const {\n      useWindowKeyDown\n    } = this.props;\n    window.removeEventListener('mousedown', this.handleMouseDown);\n    this.removeScreenChangeEvent();\n    this.removeResizeObserver();\n\n    if (this.playPauseIntervalId) {\n      window.clearInterval(this.playPauseIntervalId);\n      this.playPauseIntervalId = null;\n    }\n\n    if (this.transitionTimer) {\n      window.clearTimeout(this.transitionTimer);\n    }\n\n    if (useWindowKeyDown) {\n      window.removeEventListener('keydown', this.handleKeyDown);\n    } else {\n      this.imageGallery.current.removeEventListener('keydown', this.handleKeyDown);\n    }\n  }\n\n  onSliding() {\n    const {\n      currentIndex,\n      isTransitioning\n    } = this.state;\n    const {\n      onSlide,\n      slideDuration\n    } = this.props;\n    this.transitionTimer = window.setTimeout(() => {\n      if (isTransitioning) {\n        this.setState({\n          isTransitioning: !isTransitioning\n        });\n\n        if (onSlide) {\n          onSlide(currentIndex);\n        }\n      }\n    }, slideDuration + 50);\n  }\n\n  onThumbnailClick(event, index) {\n    const {\n      onThumbnailClick\n    } = this.props; // blur element to remove outline cause by focus\n\n    event.target.parentNode.parentNode.blur();\n    this.slideToIndex(index, event);\n\n    if (onThumbnailClick) {\n      onThumbnailClick(event, index);\n    }\n  }\n\n  onThumbnailMouseOver(event, index) {\n    if (this.thumbnailMouseOverTimer) {\n      window.clearTimeout(this.thumbnailMouseOverTimer);\n      this.thumbnailMouseOverTimer = null;\n    }\n\n    this.thumbnailMouseOverTimer = window.setTimeout(() => {\n      this.slideToIndex(index);\n      this.pause();\n    }, 300);\n  }\n\n  onThumbnailMouseLeave() {\n    if (this.thumbnailMouseOverTimer) {\n      const {\n        autoPlay\n      } = this.props;\n      window.clearTimeout(this.thumbnailMouseOverTimer);\n      this.thumbnailMouseOverTimer = null;\n\n      if (autoPlay) {\n        this.play();\n      }\n    }\n  }\n\n  setScrollDirection(dir) {\n    const {\n      scrollingUpDown,\n      scrollingLeftRight\n    } = this.state;\n\n    if (!scrollingUpDown && !scrollingLeftRight) {\n      if (dir === LEFT || dir === RIGHT) {\n        this.setState({\n          scrollingLeftRight: true\n        });\n      } else {\n        this.setState({\n          scrollingUpDown: true\n        });\n      }\n    }\n  }\n\n  setThumbsTranslate(thumbsTranslate) {\n    this.setState({\n      thumbsTranslate\n    });\n  }\n\n  setModalFullscreen(state) {\n    const {\n      onScreenChange\n    } = this.props;\n    this.setState({\n      modalFullscreen: state\n    }); // manually call because browser does not support screenchange events\n\n    if (onScreenChange) {\n      onScreenChange(state);\n    }\n  }\n\n  getThumbsTranslate(indexDifference) {\n    const {\n      disableThumbnailScroll,\n      items\n    } = this.props;\n    const {\n      thumbnailsWrapperWidth,\n      thumbnailsWrapperHeight\n    } = this.state;\n    let totalScroll;\n    const thumbElement = this.thumbnails && this.thumbnails.current;\n    if (disableThumbnailScroll) return 0;\n\n    if (thumbElement) {\n      // total scroll required to see the last thumbnail\n      if (this.isThumbnailVertical()) {\n        if (thumbElement.scrollHeight <= thumbnailsWrapperHeight) {\n          return 0;\n        }\n\n        totalScroll = thumbElement.scrollHeight - thumbnailsWrapperHeight;\n      } else {\n        if (thumbElement.scrollWidth <= thumbnailsWrapperWidth || thumbnailsWrapperWidth <= 0) {\n          return 0;\n        }\n\n        totalScroll = thumbElement.scrollWidth - thumbnailsWrapperWidth;\n      } // scroll-x required per index change\n\n\n      const perIndexScroll = totalScroll / (items.length - 1);\n      return indexDifference * perIndexScroll;\n    }\n\n    return 0;\n  }\n\n  getAlignmentClassName(index) {\n    // Necessary for lazing loading\n    const {\n      currentIndex\n    } = this.state;\n    const {\n      infinite,\n      items\n    } = this.props;\n    let alignment = '';\n    const leftClassName = 'left';\n    const centerClassName = 'center';\n    const rightClassName = 'right';\n\n    switch (index) {\n      case currentIndex - 1:\n        alignment = ` ${leftClassName}`;\n        break;\n\n      case currentIndex:\n        alignment = ` ${centerClassName}`;\n        break;\n\n      case currentIndex + 1:\n        alignment = ` ${rightClassName}`;\n        break;\n\n      default:\n        break;\n    }\n\n    if (items.length >= 3 && infinite) {\n      if (index === 0 && currentIndex === items.length - 1) {\n        // set first slide as right slide if were sliding right from last slide\n        alignment = ` ${rightClassName}`;\n      } else if (index === items.length - 1 && currentIndex === 0) {\n        // set last slide as left slide if were sliding left from first slide\n        alignment = ` ${leftClassName}`;\n      }\n    }\n\n    return alignment;\n  }\n\n  getTranslateXForTwoSlide(index) {\n    // For taking care of infinite swipe when there are only two slides\n    const {\n      currentIndex,\n      currentSlideOffset,\n      previousIndex\n    } = this.state;\n    const indexChanged = currentIndex !== previousIndex;\n    const firstSlideWasPrevSlide = index === 0 && previousIndex === 0;\n    const secondSlideWasPrevSlide = index === 1 && previousIndex === 1;\n    const firstSlideIsNextSlide = index === 0 && currentIndex === 1;\n    const secondSlideIsNextSlide = index === 1 && currentIndex === 0;\n    const swipingEnded = currentSlideOffset === 0;\n    const baseTranslateX = -100 * currentIndex;\n    let translateX = baseTranslateX + index * 100 + currentSlideOffset; // keep track of user swiping direction\n    // important to understand how to translateX based on last direction\n\n    if (currentSlideOffset > 0) {\n      this.direction = 'left';\n    } else if (currentSlideOffset < 0) {\n      this.direction = 'right';\n    } // when swiping between two slides make sure the next and prev slides\n    // are on both left and right\n\n\n    if (secondSlideIsNextSlide && currentSlideOffset > 0) {\n      // swiping right\n      translateX = -100 + currentSlideOffset;\n    }\n\n    if (firstSlideIsNextSlide && currentSlideOffset < 0) {\n      // swiping left\n      translateX = 100 + currentSlideOffset;\n    }\n\n    if (indexChanged) {\n      // when indexChanged move the slide to the correct side\n      if (firstSlideWasPrevSlide && swipingEnded && this.direction === 'left') {\n        translateX = 100;\n      } else if (secondSlideWasPrevSlide && swipingEnded && this.direction === 'right') {\n        translateX = -100;\n      }\n    } else {\n      // keep the slide on the correct side if the swipe was not successful\n      if (secondSlideIsNextSlide && swipingEnded && this.direction === 'left') {\n        translateX = -100;\n      }\n\n      if (firstSlideIsNextSlide && swipingEnded && this.direction === 'right') {\n        translateX = 100;\n      }\n    }\n\n    return translateX;\n  }\n\n  getThumbnailBarHeight() {\n    if (this.isThumbnailVertical()) {\n      const {\n        gallerySlideWrapperHeight\n      } = this.state;\n      return {\n        height: gallerySlideWrapperHeight\n      };\n    }\n\n    return {};\n  }\n\n  getSlideStyle(index) {\n    const {\n      currentIndex,\n      currentSlideOffset,\n      slideStyle\n    } = this.state;\n    const {\n      infinite,\n      items,\n      useTranslate3D,\n      isRTL\n    } = this.props;\n    const baseTranslateX = -100 * currentIndex;\n    const totalSlides = items.length - 1; // calculates where the other slides belong based on currentIndex\n    // if it is RTL the base line should be reversed\n\n    let translateX = (baseTranslateX + index * 100) * (isRTL ? -1 : 1) + currentSlideOffset;\n\n    if (infinite && items.length > 2) {\n      if (currentIndex === 0 && index === totalSlides) {\n        // make the last slide the slide before the first\n        // if it is RTL the base line should be reversed\n        translateX = -100 * (isRTL ? -1 : 1) + currentSlideOffset;\n      } else if (currentIndex === totalSlides && index === 0) {\n        // make the first slide the slide after the last\n        // if it is RTL the base line should be reversed\n        translateX = 100 * (isRTL ? -1 : 1) + currentSlideOffset;\n      }\n    } // Special case when there are only 2 items with infinite on\n\n\n    if (infinite && items.length === 2) {\n      translateX = this.getTranslateXForTwoSlide(index);\n    }\n\n    let translate = `translate(${translateX}%, 0)`;\n\n    if (useTranslate3D) {\n      translate = `translate3d(${translateX}%, 0, 0)`;\n    }\n\n    return Object.assign({}, {\n      WebkitTransform: translate,\n      MozTransform: translate,\n      msTransform: translate,\n      OTransform: translate,\n      transform: translate\n    }, slideStyle);\n  }\n\n  getCurrentIndex() {\n    const {\n      currentIndex\n    } = this.state;\n    return currentIndex;\n  }\n\n  getThumbnailStyle() {\n    let translate;\n    const {\n      useTranslate3D,\n      isRTL\n    } = this.props;\n    const {\n      thumbsTranslate\n    } = this.state;\n    const verticalTranslateValue = isRTL ? thumbsTranslate * -1 : thumbsTranslate;\n\n    if (this.isThumbnailVertical()) {\n      translate = `translate(0, ${thumbsTranslate}px)`;\n\n      if (useTranslate3D) {\n        translate = `translate3d(0, ${thumbsTranslate}px, 0)`;\n      }\n    } else {\n      translate = `translate(${verticalTranslateValue}px, 0)`;\n\n      if (useTranslate3D) {\n        translate = `translate3d(${verticalTranslateValue}px, 0, 0)`;\n      }\n    }\n\n    return {\n      WebkitTransform: translate,\n      MozTransform: translate,\n      msTransform: translate,\n      OTransform: translate,\n      transform: translate\n    };\n  }\n\n  getSlideItems() {\n    const {\n      currentIndex\n    } = this.state;\n    const {\n      infinite,\n      items,\n      slideOnThumbnailOver,\n      onClick,\n      lazyLoad,\n      onTouchMove,\n      onTouchEnd,\n      onTouchStart,\n      onMouseOver,\n      onMouseLeave,\n      renderItem,\n      renderThumbInner,\n      showThumbnails,\n      showBullets\n    } = this.props;\n    const slides = [];\n    const thumbnails = [];\n    const bullets = [];\n    items.forEach((item, index) => {\n      const alignment = this.getAlignmentClassName(index);\n      const originalClass = item.originalClass ? ` ${item.originalClass}` : '';\n      const thumbnailClass = item.thumbnailClass ? ` ${item.thumbnailClass}` : '';\n      const handleRenderItem = item.renderItem || renderItem || this.renderItem;\n      const handleRenderThumbInner = item.renderThumbInner || renderThumbInner || this.renderThumbInner;\n      const showItem = !lazyLoad || alignment || this.lazyLoaded[index];\n\n      if (showItem && lazyLoad && !this.lazyLoaded[index]) {\n        this.lazyLoaded[index] = true;\n      }\n\n      const slideStyle = this.getSlideStyle(index);\n      const slide = /*#__PURE__*/React.createElement(\"div\", {\n        \"aria-label\": `Go to Slide ${index + 1}`,\n        key: `slide-${index}`,\n        tabIndex: \"-1\",\n        className: `image-gallery-slide ${alignment} ${originalClass}`,\n        style: slideStyle,\n        onClick: onClick,\n        onKeyUp: this.handleSlideKeyUp,\n        onTouchMove: onTouchMove,\n        onTouchEnd: onTouchEnd,\n        onTouchStart: onTouchStart,\n        onMouseOver: onMouseOver,\n        onFocus: onMouseOver,\n        onMouseLeave: onMouseLeave,\n        role: \"button\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 663,\n          columnNumber: 9\n        }\n      }, showItem ? handleRenderItem(item) : /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          height: '100%'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 679,\n          columnNumber: 48\n        }\n      }));\n\n      if (infinite) {\n        // don't add some slides while transitioning to avoid background transitions\n        if (this.shouldPushSlideOnInfiniteMode(index)) {\n          slides.push(slide);\n        }\n      } else {\n        slides.push(slide);\n      }\n\n      if (showThumbnails) {\n        const igThumbnailClass = clsx('image-gallery-thumbnail', thumbnailClass, {\n          active: currentIndex === index\n        });\n        thumbnails.push( /*#__PURE__*/React.createElement(\"button\", {\n          key: `thumbnail-${index}`,\n          type: \"button\",\n          tabIndex: \"0\",\n          \"aria-pressed\": currentIndex === index ? 'true' : 'false',\n          \"aria-label\": `Go to Slide ${index + 1}`,\n          className: igThumbnailClass,\n          onMouseLeave: slideOnThumbnailOver ? this.onThumbnailMouseLeave : null,\n          onMouseOver: event => this.handleThumbnailMouseOver(event, index),\n          onFocus: event => this.handleThumbnailMouseOver(event, index),\n          onKeyUp: event => this.handleThumbnailKeyUp(event, index),\n          onClick: event => this.onThumbnailClick(event, index),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 699,\n            columnNumber: 11\n          }\n        }, handleRenderThumbInner(item)));\n      }\n\n      if (showBullets) {\n        // generate bullet elements and store them in array\n        const bulletOnClick = event => {\n          if (item.bulletOnClick) {\n            item.bulletOnClick({\n              item,\n              itemIndex: index,\n              currentIndex\n            });\n          } // blur element to remove outline cause by focus\n\n\n          event.target.blur();\n          return this.slideToIndex.call(this, index, event);\n        };\n\n        const igBulletClass = clsx('image-gallery-bullet', item.bulletClass, {\n          active: currentIndex === index\n        });\n        bullets.push( /*#__PURE__*/React.createElement(\"button\", {\n          type: \"button\",\n          key: `bullet-${index}`,\n          className: igBulletClass,\n          onClick: bulletOnClick,\n          \"aria-pressed\": currentIndex === index ? 'true' : 'false',\n          \"aria-label\": `Go to Slide ${index + 1}`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 733,\n            columnNumber: 11\n          }\n        }));\n      }\n    });\n    return {\n      slides,\n      thumbnails,\n      bullets\n    };\n  }\n\n  ignoreIsTransitioning() {\n    /*\r\n      Ignore isTransitioning because were not going to sibling slides\r\n      e.g. center to left or center to right\r\n    */\n    const {\n      items\n    } = this.props;\n    const {\n      previousIndex,\n      currentIndex\n    } = this.state;\n    const totalSlides = items.length - 1; // we want to show the in between slides transition\n\n    const slidingMoreThanOneSlideLeftOrRight = Math.abs(previousIndex - currentIndex) > 1;\n    const notGoingFromFirstToLast = !(previousIndex === 0 && currentIndex === totalSlides);\n    const notGoingFromLastToFirst = !(previousIndex === totalSlides && currentIndex === 0);\n    return slidingMoreThanOneSlideLeftOrRight && notGoingFromFirstToLast && notGoingFromLastToFirst;\n  }\n\n  isFirstOrLastSlide(index) {\n    const {\n      items\n    } = this.props;\n    const totalSlides = items.length - 1;\n    const isLastSlide = index === totalSlides;\n    const isFirstSlide = index === 0;\n    return isLastSlide || isFirstSlide;\n  }\n\n  slideIsTransitioning(index) {\n    /*\r\n    returns true if the gallery is transitioning and the index is not the\r\n    previous or currentIndex\r\n    */\n    const {\n      isTransitioning,\n      previousIndex,\n      currentIndex\n    } = this.state;\n    const indexIsNotPreviousOrNextSlide = !(index === previousIndex || index === currentIndex);\n    return isTransitioning && indexIsNotPreviousOrNextSlide;\n  }\n\n  shouldPushSlideOnInfiniteMode(index) {\n    /*\r\n      Push (show) slide if slide is the current slide and the next slide\r\n      OR\r\n      The slide is going more than one slide left or right, but not going from\r\n      first to last and not going from last to first\r\n      Edge case:\r\n      If you go to the first or last slide, when they're\r\n      not left, or right of each other they will try to catch up in the background\r\n      so unless were going from first to last or vice versa we don't want the first\r\n      or last slide to show up during the transition\r\n    */\n    return !this.slideIsTransitioning(index) || this.ignoreIsTransitioning() && !this.isFirstOrLastSlide(index);\n  }\n\n  slideThumbnailBar(previousIndex) {\n    const {\n      thumbsTranslate,\n      currentIndex\n    } = this.state;\n\n    if (currentIndex === 0) {\n      this.setThumbsTranslate(0);\n    } else {\n      const indexDifference = Math.abs(previousIndex - currentIndex);\n      const scroll = this.getThumbsTranslate(indexDifference);\n\n      if (scroll > 0) {\n        if (previousIndex < currentIndex) {\n          this.setThumbsTranslate(thumbsTranslate - scroll);\n        } else if (previousIndex > currentIndex) {\n          this.setThumbsTranslate(thumbsTranslate + scroll);\n        }\n      }\n    }\n  }\n\n  canSlide() {\n    const {\n      items\n    } = this.props;\n    return items.length >= 2;\n  }\n\n  canSlideLeft() {\n    const {\n      infinite,\n      isRTL\n    } = this.props;\n    return infinite || (isRTL ? this.canSlideNext() : this.canSlidePrevious());\n  }\n\n  canSlideRight() {\n    const {\n      infinite,\n      isRTL\n    } = this.props;\n    return infinite || (isRTL ? this.canSlidePrevious() : this.canSlideNext());\n  }\n\n  canSlidePrevious() {\n    const {\n      currentIndex\n    } = this.state;\n    return currentIndex > 0;\n  }\n\n  canSlideNext() {\n    const {\n      currentIndex\n    } = this.state;\n    const {\n      items\n    } = this.props;\n    return currentIndex < items.length - 1;\n  }\n\n  handleSwiping({\n    event,\n    absX,\n    dir\n  }) {\n    const {\n      disableSwipe,\n      stopPropagation\n    } = this.props;\n    const {\n      galleryWidth,\n      isTransitioning\n    } = this.state;\n    if (disableSwipe) return;\n    const {\n      swipingTransitionDuration\n    } = this.props;\n    this.setScrollDirection(dir);\n    if (stopPropagation) event.stopPropagation();\n\n    if (!isTransitioning) {\n      const side = dir === RIGHT ? 1 : -1;\n      let currentSlideOffset = absX / galleryWidth * 100;\n\n      if (Math.abs(currentSlideOffset) >= 100) {\n        currentSlideOffset = 100;\n      }\n\n      const swipingTransition = {\n        transition: `transform ${swipingTransitionDuration}ms ease-out`\n      };\n      this.setState({\n        currentSlideOffset: side * currentSlideOffset,\n        slideStyle: swipingTransition\n      });\n    } else {\n      // don't move the slide\n      this.setState({\n        currentSlideOffset: 0\n      });\n    }\n  }\n\n  sufficientSwipe() {\n    const {\n      currentSlideOffset\n    } = this.state;\n    const {\n      swipeThreshold\n    } = this.props;\n    return Math.abs(currentSlideOffset) > swipeThreshold;\n  }\n\n  handleOnSwiped({\n    event,\n    dir,\n    velocity\n  }) {\n    const {\n      disableSwipe,\n      stopPropagation,\n      flickThreshold\n    } = this.props;\n    const {\n      scrollingUpDown,\n      scrollingLeftRight\n    } = this.state;\n    if (disableSwipe) return;\n    const {\n      isRTL\n    } = this.props;\n    if (stopPropagation) event.stopPropagation();\n\n    if (scrollingUpDown) {\n      // user stopped scrollingUpDown\n      this.setState({\n        scrollingUpDown: false\n      });\n    }\n\n    if (scrollingLeftRight) {\n      // user stopped scrollingLeftRight\n      this.setState({\n        scrollingLeftRight: false\n      });\n    } // if it is RTL the direction is reversed\n\n\n    const swipeDirection = (dir === LEFT ? 1 : -1) * (isRTL ? -1 : 1);\n    const isSwipeUpOrDown = dir === UP || dir === DOWN;\n    const isLeftRightFlick = velocity > flickThreshold && !isSwipeUpOrDown;\n    this.handleOnSwipedTo(swipeDirection, isLeftRightFlick);\n  }\n\n  handleOnSwipedTo(swipeDirection, isLeftRightFlick) {\n    const {\n      currentIndex,\n      isTransitioning\n    } = this.state;\n    let slideTo = currentIndex;\n\n    if ((this.sufficientSwipe() || isLeftRightFlick) && !isTransitioning) {\n      // slideto the next/prev slide\n      slideTo += swipeDirection;\n    } // If we can't swipe left or right, stay in the current index (noop)\n\n\n    if (swipeDirection === -1 && !this.canSlideLeft() || swipeDirection === 1 && !this.canSlideRight()) {\n      slideTo = currentIndex;\n    }\n\n    this.unthrottledSlideToIndex(slideTo);\n  }\n\n  handleMouseDown() {\n    // keep track of mouse vs keyboard usage for a11y\n    this.imageGallery.current.classList.add('image-gallery-using-mouse');\n  }\n\n  handleKeyDown(event) {\n    const {\n      disableKeyDown,\n      useBrowserFullscreen\n    } = this.props;\n    const {\n      isFullscreen\n    } = this.state; // keep track of mouse vs keyboard usage for a11y\n\n    this.imageGallery.current.classList.remove('image-gallery-using-mouse');\n    if (disableKeyDown) return;\n    const LEFT_ARROW = 37;\n    const RIGHT_ARROW = 39;\n    const ESC_KEY = 27;\n    const key = parseInt(event.keyCode || event.which || 0, 10);\n\n    switch (key) {\n      case LEFT_ARROW:\n        if (this.canSlideLeft() && !this.playPauseIntervalId) {\n          this.slideLeft(event);\n        }\n\n        break;\n\n      case RIGHT_ARROW:\n        if (this.canSlideRight() && !this.playPauseIntervalId) {\n          this.slideRight(event);\n        }\n\n        break;\n\n      case ESC_KEY:\n        if (isFullscreen && !useBrowserFullscreen) {\n          this.exitFullScreen();\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  handleImageError(event) {\n    const {\n      onErrorImageURL\n    } = this.props;\n\n    if (onErrorImageURL && event.target.src.indexOf(onErrorImageURL) === -1) {\n      /* eslint-disable no-param-reassign */\n      event.target.src = onErrorImageURL;\n      /* eslint-enable no-param-reassign */\n    }\n  }\n\n  removeResizeObserver() {\n    if (this.resizeObserver && this.imageGallerySlideWrapper && this.imageGallerySlideWrapper.current) {\n      this.resizeObserver.unobserve(this.imageGallerySlideWrapper.current);\n      this.resizeObserver = null;\n    }\n  }\n\n  handleResize() {\n    const {\n      currentIndex\n    } = this.state; // if there is no resizeObserver, component has been unmounted\n\n    if (!this.resizeObserver) {\n      return;\n    }\n\n    if (this.imageGallery && this.imageGallery.current) {\n      this.setState({\n        galleryWidth: this.imageGallery.current.offsetWidth\n      });\n    }\n\n    if (this.imageGallerySlideWrapper && this.imageGallerySlideWrapper.current) {\n      this.setState({\n        gallerySlideWrapperHeight: this.imageGallerySlideWrapper.current.offsetHeight\n      });\n    }\n\n    if (this.thumbnailsWrapper && this.thumbnailsWrapper.current) {\n      if (this.isThumbnailVertical()) {\n        this.setState({\n          thumbnailsWrapperHeight: this.thumbnailsWrapper.current.offsetHeight\n        });\n      } else {\n        this.setState({\n          thumbnailsWrapperWidth: this.thumbnailsWrapper.current.offsetWidth\n        });\n      }\n    } // Adjust thumbnail container when thumbnail width or height is adjusted\n\n\n    this.setThumbsTranslate(-this.getThumbsTranslate(currentIndex));\n  }\n\n  initResizeObserver(element) {\n    this.resizeObserver = new ResizeObserver(debounce(entries => {\n      if (!entries) return;\n      entries.forEach(() => {\n        this.handleResize();\n      });\n    }, 300));\n    this.resizeObserver.observe(element.current);\n  }\n\n  toggleFullScreen() {\n    const {\n      isFullscreen\n    } = this.state;\n\n    if (isFullscreen) {\n      this.exitFullScreen();\n    } else {\n      this.fullScreen();\n    }\n  }\n\n  togglePlay() {\n    if (this.playPauseIntervalId) {\n      this.pause();\n    } else {\n      this.play();\n    }\n  }\n\n  handleScreenChange() {\n    /*\r\n      handles screen change events that the browser triggers e.g. esc key\r\n    */\n    const {\n      onScreenChange,\n      useBrowserFullscreen\n    } = this.props;\n    const fullScreenElement = document.fullscreenElement || document.msFullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement; // check if screenchange element is the gallery\n\n    const isFullscreen = this.imageGallery.current === fullScreenElement;\n    if (onScreenChange) onScreenChange(isFullscreen);\n    if (useBrowserFullscreen) this.setState({\n      isFullscreen\n    });\n  }\n\n  slideToIndex(index, event) {\n    const {\n      currentIndex,\n      isTransitioning\n    } = this.state;\n    const {\n      items,\n      slideDuration,\n      onBeforeSlide\n    } = this.props;\n\n    if (!isTransitioning) {\n      if (event) {\n        if (this.playPauseIntervalId) {\n          // user triggered event while ImageGallery is playing, reset interval\n          this.pause(false);\n          this.play(false);\n        }\n      }\n\n      const slideCount = items.length - 1;\n      let nextIndex = index;\n\n      if (index < 0) {\n        nextIndex = slideCount;\n      } else if (index > slideCount) {\n        nextIndex = 0;\n      }\n\n      if (onBeforeSlide && nextIndex !== currentIndex) {\n        onBeforeSlide(nextIndex);\n      }\n\n      this.setState({\n        previousIndex: currentIndex,\n        currentIndex: nextIndex,\n        isTransitioning: nextIndex !== currentIndex,\n        currentSlideOffset: 0,\n        slideStyle: {\n          transition: `all ${slideDuration}ms ease-out`\n        }\n      }, this.onSliding);\n    }\n  }\n\n  slideLeft(event) {\n    const {\n      isRTL\n    } = this.props;\n\n    if (isRTL) {\n      this.slideNext(event);\n    } else {\n      this.slidePrevious(event);\n    }\n  }\n\n  slideRight(event) {\n    const {\n      isRTL\n    } = this.props;\n\n    if (isRTL) {\n      this.slidePrevious(event);\n    } else {\n      this.slideNext(event);\n    }\n  }\n\n  slidePrevious(event) {\n    const {\n      currentIndex,\n      currentSlideOffset,\n      isTransitioning\n    } = this.state;\n    const {\n      items\n    } = this.props;\n    const nextIndex = currentIndex - 1;\n    if (isTransitioning) return;\n\n    if (items.length === 2) {\n      /*\r\n        When there are only 2 slides fake a tiny swipe to get the slides\r\n        on the correct side for transitioning\r\n      */\n      this.setState({\n        currentSlideOffset: currentSlideOffset + 0.001,\n        // this will reset once index changes\n        slideStyle: {\n          transition: 'none'\n        } // move the slide over instantly\n\n      }, () => {\n        // add 25ms timeout to avoid delay in moving slides over\n        window.setTimeout(() => this.slideToIndex(nextIndex, event), 25);\n      });\n    } else {\n      this.slideToIndex(nextIndex, event);\n    }\n  }\n\n  slideNext(event) {\n    const {\n      currentIndex,\n      currentSlideOffset,\n      isTransitioning\n    } = this.state;\n    const {\n      items\n    } = this.props;\n    const nextIndex = currentIndex + 1;\n    if (isTransitioning) return;\n\n    if (items.length === 2) {\n      // same as above for 2 slides\n      this.setState({\n        currentSlideOffset: currentSlideOffset - 0.001,\n        slideStyle: {\n          transition: 'none'\n        }\n      }, () => {\n        window.setTimeout(() => this.slideToIndex(nextIndex, event), 25);\n      });\n    } else {\n      this.slideToIndex(nextIndex, event);\n    }\n  }\n\n  handleThumbnailMouseOver(event, index) {\n    const {\n      slideOnThumbnailOver\n    } = this.props;\n    if (slideOnThumbnailOver) this.onThumbnailMouseOver(event, index);\n  }\n\n  handleThumbnailKeyUp(event, index) {\n    // a11y support ^_^\n    if (isEnterOrSpaceKey(event)) this.onThumbnailClick(event, index);\n  }\n\n  handleSlideKeyUp(event) {\n    // a11y support ^_^\n    if (isEnterOrSpaceKey(event)) {\n      const {\n        onClick\n      } = this.props;\n      onClick(event);\n    }\n  }\n\n  isThumbnailVertical() {\n    const {\n      thumbnailPosition\n    } = this.props;\n    return thumbnailPosition === 'left' || thumbnailPosition === 'right';\n  }\n\n  addScreenChangeEvent() {\n    screenChangeEvents.forEach(eventName => {\n      document.addEventListener(eventName, this.handleScreenChange);\n    });\n  }\n\n  removeScreenChangeEvent() {\n    screenChangeEvents.forEach(eventName => {\n      document.removeEventListener(eventName, this.handleScreenChange);\n    });\n  }\n\n  fullScreen() {\n    const {\n      useBrowserFullscreen\n    } = this.props;\n    const gallery = this.imageGallery.current;\n\n    if (useBrowserFullscreen) {\n      if (gallery.requestFullscreen) {\n        gallery.requestFullscreen();\n      } else if (gallery.msRequestFullscreen) {\n        gallery.msRequestFullscreen();\n      } else if (gallery.mozRequestFullScreen) {\n        gallery.mozRequestFullScreen();\n      } else if (gallery.webkitRequestFullscreen) {\n        gallery.webkitRequestFullscreen();\n      } else {\n        // fallback to fullscreen modal for unsupported browsers\n        this.setModalFullscreen(true);\n      }\n    } else {\n      this.setModalFullscreen(true);\n    }\n\n    this.setState({\n      isFullscreen: true\n    });\n  }\n\n  exitFullScreen() {\n    const {\n      isFullscreen\n    } = this.state;\n    const {\n      useBrowserFullscreen\n    } = this.props;\n\n    if (isFullscreen) {\n      if (useBrowserFullscreen) {\n        if (document.exitFullscreen) {\n          document.exitFullscreen();\n        } else if (document.webkitExitFullscreen) {\n          document.webkitExitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n          document.mozCancelFullScreen();\n        } else if (document.msExitFullscreen) {\n          document.msExitFullscreen();\n        } else {\n          // fallback to fullscreen modal for unsupported browsers\n          this.setModalFullscreen(false);\n        }\n      } else {\n        this.setModalFullscreen(false);\n      }\n\n      this.setState({\n        isFullscreen: false\n      });\n    }\n  }\n\n  pauseOrPlay() {\n    const {\n      infinite\n    } = this.props;\n    const {\n      currentIndex\n    } = this.state;\n\n    if (!infinite && !this.canSlideRight()) {\n      this.pause();\n    } else {\n      this.slideToIndex(currentIndex + 1);\n    }\n  }\n\n  play(shouldCallOnPlay = true) {\n    const {\n      onPlay,\n      slideInterval,\n      slideDuration\n    } = this.props;\n    const {\n      currentIndex\n    } = this.state;\n\n    if (!this.playPauseIntervalId) {\n      this.setState({\n        isPlaying: true\n      });\n      this.playPauseIntervalId = window.setInterval(this.pauseOrPlay, Math.max(slideInterval, slideDuration));\n\n      if (onPlay && shouldCallOnPlay) {\n        onPlay(currentIndex);\n      }\n    }\n  }\n\n  pause(shouldCallOnPause = true) {\n    const {\n      onPause\n    } = this.props;\n    const {\n      currentIndex\n    } = this.state;\n\n    if (this.playPauseIntervalId) {\n      window.clearInterval(this.playPauseIntervalId);\n      this.playPauseIntervalId = null;\n      this.setState({\n        isPlaying: false\n      });\n\n      if (onPause && shouldCallOnPause) {\n        onPause(currentIndex);\n      }\n    }\n  }\n\n  isImageLoaded(item) {\n    /*\r\n      Keep track of images loaded so that onImageLoad prop is not\r\n      called multiple times when re-render the images\r\n    */\n    const imageExists = this.loadedImages[item.original];\n\n    if (imageExists) {\n      return true;\n    } // add image as loaded\n\n\n    this.loadedImages[item.original] = true;\n    return false;\n  }\n\n  handleImageLoaded(event, item) {\n    const {\n      onImageLoad\n    } = this.props;\n    const imageExists = this.loadedImages[item.original];\n\n    if (!imageExists && onImageLoad) {\n      this.loadedImages[item.original] = true; // prevent from call again\n      // image just loaded, call onImageLoad\n\n      onImageLoad(event);\n    }\n  }\n\n  renderItem(item) {\n    const {\n      isFullscreen\n    } = this.state;\n    const {\n      onImageError\n    } = this.props;\n    const handleImageError = onImageError || this.handleImageError;\n    const itemSrc = isFullscreen ? item.fullscreen || item.original : item.original;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1313,\n        columnNumber: 7\n      }\n    }, item.imageSet ? /*#__PURE__*/React.createElement(\"picture\", {\n      onLoad: event => this.handleImageLoaded(event, item),\n      onError: handleImageError,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1316,\n        columnNumber: 13\n      }\n    }, item.imageSet.map((source, index) => /*#__PURE__*/React.createElement(\"source\", {\n      key: `media-${index}`,\n      media: source.media,\n      srcSet: source.srcSet,\n      type: source.type,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1322,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(\"img\", {\n      className: \"image-gallery-image\",\n      alt: item.originalAlt,\n      src: itemSrc,\n      height: item.originalHeight,\n      width: item.originalWidth,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1330,\n        columnNumber: 15\n      }\n    })) : /*#__PURE__*/React.createElement(\"img\", {\n      className: \"image-gallery-image\",\n      src: itemSrc,\n      alt: item.originalAlt,\n      srcSet: item.srcSet,\n      height: item.originalHeight,\n      width: item.originalWidth,\n      sizes: item.sizes,\n      title: item.originalTitle,\n      onLoad: event => this.handleImageLoaded(event, item),\n      onError: handleImageError,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1339,\n        columnNumber: 13\n      }\n    }), item.description && /*#__PURE__*/React.createElement(\"span\", {\n      className: \"image-gallery-description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1356,\n        columnNumber: 13\n      }\n    }, item.description));\n  }\n\n  renderThumbInner(item) {\n    const {\n      onThumbnailError\n    } = this.props;\n    const handleThumbnailError = onThumbnailError || this.handleImageError;\n    return /*#__PURE__*/React.createElement(\"span\", {\n      className: \"image-gallery-thumbnail-inner\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1370,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"image-gallery-thumbnail-image\",\n      src: item.thumbnail,\n      height: item.thumbnailHeight,\n      width: item.thumbnailWidth,\n      alt: item.thumbnailAlt,\n      title: item.thumbnailTitle,\n      onError: handleThumbnailError,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1371,\n        columnNumber: 9\n      }\n    }), item.thumbnailLabel && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"image-gallery-thumbnail-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1382,\n        columnNumber: 13\n      }\n    }, item.thumbnailLabel));\n  }\n\n  render() {\n    const {\n      currentIndex,\n      isFullscreen,\n      modalFullscreen,\n      isPlaying\n    } = this.state;\n    const {\n      additionalClass,\n      indexSeparator,\n      // deprecate soon, and allow custom render\n      isRTL,\n      items,\n      thumbnailPosition,\n      renderFullscreenButton,\n      renderCustomControls,\n      renderLeftNav,\n      renderRightNav,\n      showBullets,\n      showFullscreenButton,\n      showIndex,\n      showThumbnails,\n      showNav,\n      showPlayButton,\n      renderPlayPauseButton\n    } = this.props;\n    const thumbnailStyle = this.getThumbnailStyle();\n    const {\n      slides,\n      thumbnails,\n      bullets\n    } = this.getSlideItems();\n    const slideWrapperClass = clsx('image-gallery-slide-wrapper', thumbnailPosition, {\n      'image-gallery-rtl': isRTL\n    });\n    const slideWrapper = /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.imageGallerySlideWrapper,\n      className: slideWrapperClass,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1427,\n        columnNumber: 7\n      }\n    }, renderCustomControls && renderCustomControls(), this.canSlide() ? /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1431,\n        columnNumber: 13\n      }\n    }, showNav && /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1434,\n        columnNumber: 19\n      }\n    }, renderLeftNav(this.slideLeft, !this.canSlideLeft()), renderRightNav(this.slideRight, !this.canSlideRight())), /*#__PURE__*/React.createElement(SwipeWrapper, {\n      className: \"image-gallery-swipe\",\n      delta: 0,\n      onSwiping: this.handleSwiping,\n      onSwiped: this.handleOnSwiped,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1440,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"image-gallery-slides\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1446,\n        columnNumber: 17\n      }\n    }, slides))) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"image-gallery-slides\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1452,\n        columnNumber: 13\n      }\n    }, slides), showPlayButton && renderPlayPauseButton(this.togglePlay, isPlaying), showBullets && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"image-gallery-bullets\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1460,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"image-gallery-bullets-container\",\n      role: \"navigation\",\n      \"aria-label\": \"Bullet Navigation\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1461,\n        columnNumber: 15\n      }\n    }, bullets)), showFullscreenButton && renderFullscreenButton(this.toggleFullScreen, isFullscreen), showIndex && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"image-gallery-index\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1474,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"image-gallery-index-current\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1475,\n        columnNumber: 15\n      }\n    }, currentIndex + 1), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"image-gallery-index-separator\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1478,\n        columnNumber: 15\n      }\n    }, indexSeparator), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"image-gallery-index-total\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1481,\n        columnNumber: 15\n      }\n    }, items.length)));\n    const igClass = clsx('image-gallery', additionalClass, {\n      'fullscreen-modal': modalFullscreen\n    });\n    const igContentClass = clsx('image-gallery-content', thumbnailPosition, {\n      fullscreen: isFullscreen\n    });\n    const thumbnailWrapperClass = clsx('image-gallery-thumbnails-wrapper', thumbnailPosition, {\n      'thumbnails-wrapper-rtl': !this.isThumbnailVertical() && isRTL\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.imageGallery,\n      className: igClass,\n      \"aria-live\": \"polite\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1498,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: igContentClass,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1503,\n        columnNumber: 9\n      }\n    }, (thumbnailPosition === 'bottom' || thumbnailPosition === 'right') && slideWrapper, showThumbnails && /*#__PURE__*/React.createElement(\"div\", {\n      className: thumbnailWrapperClass,\n      style: this.getThumbnailBarHeight(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1507,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"image-gallery-thumbnails\",\n      ref: this.thumbnailsWrapper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1508,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.thumbnails,\n      className: \"image-gallery-thumbnails-container\",\n      style: thumbnailStyle,\n      \"aria-label\": \"Thumbnail Navigation\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1509,\n        columnNumber: 19\n      }\n    }, thumbnails))), (thumbnailPosition === 'top' || thumbnailPosition === 'left') && slideWrapper));\n  }\n\n}\nImageGallery.propTypes = {\n  flickThreshold: number,\n  items: arrayOf(shape({\n    bulletClass: string,\n    bulletOnClick: func,\n    description: string,\n    original: string,\n    originalHeight: number,\n    originalWidth: number,\n    thumbnailHeight: number,\n    thumbnailWidth: number,\n    fullscreen: string,\n    originalAlt: string,\n    originalTitle: string,\n    thumbnail: string,\n    thumbnailAlt: string,\n    thumbnailLabel: string,\n    thumbnailTitle: string,\n    originalClass: string,\n    thumbnailClass: string,\n    renderItem: func,\n    renderThumbInner: func,\n    imageSet: imageSetType,\n    srcSet: string,\n    sizes: string\n  })).isRequired,\n  showNav: bool,\n  autoPlay: bool,\n  lazyLoad: bool,\n  infinite: bool,\n  showIndex: bool,\n  showBullets: bool,\n  showThumbnails: bool,\n  showPlayButton: bool,\n  showFullscreenButton: bool,\n  disableThumbnailScroll: bool,\n  disableKeyDown: bool,\n  disableSwipe: bool,\n  useBrowserFullscreen: bool,\n  onErrorImageURL: string,\n  indexSeparator: string,\n  thumbnailPosition: oneOf(['top', 'bottom', 'left', 'right']),\n  startIndex: number,\n  slideDuration: number,\n  slideInterval: number,\n  slideOnThumbnailOver: bool,\n  swipeThreshold: number,\n  swipingTransitionDuration: number,\n  onSlide: func,\n  onBeforeSlide: func,\n  onScreenChange: func,\n  onPause: func,\n  onPlay: func,\n  onClick: func,\n  onImageLoad: func,\n  onImageError: func,\n  onTouchMove: func,\n  onTouchEnd: func,\n  onTouchStart: func,\n  onMouseOver: func,\n  onMouseLeave: func,\n  onThumbnailError: func,\n  onThumbnailClick: func,\n  renderCustomControls: func,\n  renderLeftNav: func,\n  renderRightNav: func,\n  renderPlayPauseButton: func,\n  renderFullscreenButton: func,\n  renderItem: func,\n  renderThumbInner: func,\n  stopPropagation: bool,\n  additionalClass: string,\n  useTranslate3D: bool,\n  isRTL: bool,\n  useWindowKeyDown: bool\n};\nImageGallery.defaultProps = {\n  onErrorImageURL: '',\n  additionalClass: '',\n  showNav: true,\n  autoPlay: false,\n  lazyLoad: false,\n  infinite: true,\n  showIndex: false,\n  showBullets: false,\n  showThumbnails: true,\n  showPlayButton: true,\n  showFullscreenButton: true,\n  disableThumbnailScroll: false,\n  disableKeyDown: false,\n  disableSwipe: false,\n  useTranslate3D: true,\n  isRTL: false,\n  useBrowserFullscreen: true,\n  flickThreshold: 0.4,\n  stopPropagation: false,\n  indexSeparator: ' / ',\n  thumbnailPosition: 'bottom',\n  startIndex: 0,\n  slideDuration: 450,\n  swipingTransitionDuration: 0,\n  onSlide: null,\n  onBeforeSlide: null,\n  onScreenChange: null,\n  onPause: null,\n  onPlay: null,\n  onClick: null,\n  onImageLoad: null,\n  onImageError: null,\n  onTouchMove: null,\n  onTouchEnd: null,\n  onTouchStart: null,\n  onMouseOver: null,\n  onMouseLeave: null,\n  onThumbnailError: null,\n  onThumbnailClick: null,\n  renderCustomControls: null,\n  renderThumbInner: null,\n  renderItem: null,\n  slideInterval: 3000,\n  slideOnThumbnailOver: false,\n  swipeThreshold: 30,\n  renderLeftNav: (onClick, disabled) => /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"image-gallery-icon image-gallery-left-nav\",\n    disabled: disabled,\n    onClick: onClick,\n    \"aria-label\": \"Previous Slide\",\n    __self: ImageGallery,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(SVG, {\n    icon: \"left\",\n    viewBox: \"6 0 12 24\",\n    __self: ImageGallery,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }\n  })),\n  renderRightNav: (onClick, disabled) => /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"image-gallery-icon image-gallery-right-nav\",\n    disabled: disabled,\n    onClick: onClick,\n    \"aria-label\": \"Next Slide\",\n    __self: ImageGallery,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(SVG, {\n    icon: \"right\",\n    viewBox: \"6 0 12 24\",\n    __self: ImageGallery,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }\n  })),\n  renderPlayPauseButton: (onClick, isPlaying) => /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"image-gallery-icon image-gallery-play-button\",\n    onClick: onClick,\n    \"aria-label\": \"Play or Pause Slideshow\",\n    __self: ImageGallery,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(SVG, {\n    strokeWidth: 2,\n    icon: isPlaying ? 'pause' : 'play',\n    __self: ImageGallery,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 9\n    }\n  })),\n  renderFullscreenButton: (onClick, isFullscreen) => /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"image-gallery-icon image-gallery-fullscreen-button\",\n    onClick: onClick,\n    \"aria-label\": \"Open Fullscreen\",\n    __self: ImageGallery,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(SVG, {\n    strokeWidth: 2,\n    icon: isFullscreen ? 'minimize' : 'maximize',\n    __self: ImageGallery,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }\n  })),\n  useWindowKeyDown: true\n};","map":{"version":3,"sources":["D:/SiteSF_React/src/components/Carousel1.js"],"names":["clsx","React","throttle","debounce","isEqual","ResizeObserver","LEFT","RIGHT","UP","DOWN","arrayOf","bool","func","number","oneOf","shape","string","SVG","SwipeWrapper","screenChangeEvents","imageSetType","srcSet","media","isEnterOrSpaceKey","event","key","parseInt","keyCode","which","ENTER_KEY_CODE","SPACEBAR_KEY_CODE","ImageGallery","Component","constructor","props","state","currentIndex","startIndex","thumbsTranslate","currentSlideOffset","galleryWidth","thumbnailsWrapperWidth","thumbnailsWrapperHeight","isFullscreen","isPlaying","loadedImages","imageGallery","createRef","thumbnailsWrapper","thumbnails","imageGallerySlideWrapper","handleKeyDown","bind","handleMouseDown","handleOnSwiped","handleScreenChange","handleSwiping","onThumbnailMouseLeave","handleImageError","pauseOrPlay","renderThumbInner","renderItem","slideLeft","slideRight","toggleFullScreen","togglePlay","unthrottledSlideToIndex","slideToIndex","slideDuration","trailing","lazyLoad","lazyLoaded","componentDidMount","autoPlay","useWindowKeyDown","play","window","addEventListener","current","initResizeObserver","addScreenChangeEvent","componentDidUpdate","prevProps","prevState","items","slideInterval","thumbnailPosition","showThumbnails","itemsSizeChanged","length","itemsChanged","startIndexUpdated","thumbnailsPositionChanged","showThumbnailsChanged","pause","removeResizeObserver","handleResize","slideThumbnailBar","removeEventListener","setState","componentWillUnmount","removeScreenChangeEvent","playPauseIntervalId","clearInterval","transitionTimer","clearTimeout","onSliding","isTransitioning","onSlide","setTimeout","onThumbnailClick","index","target","parentNode","blur","onThumbnailMouseOver","thumbnailMouseOverTimer","setScrollDirection","dir","scrollingUpDown","scrollingLeftRight","setThumbsTranslate","setModalFullscreen","onScreenChange","modalFullscreen","getThumbsTranslate","indexDifference","disableThumbnailScroll","totalScroll","thumbElement","isThumbnailVertical","scrollHeight","scrollWidth","perIndexScroll","getAlignmentClassName","infinite","alignment","leftClassName","centerClassName","rightClassName","getTranslateXForTwoSlide","previousIndex","indexChanged","firstSlideWasPrevSlide","secondSlideWasPrevSlide","firstSlideIsNextSlide","secondSlideIsNextSlide","swipingEnded","baseTranslateX","translateX","direction","getThumbnailBarHeight","gallerySlideWrapperHeight","height","getSlideStyle","slideStyle","useTranslate3D","isRTL","totalSlides","translate","Object","assign","WebkitTransform","MozTransform","msTransform","OTransform","transform","getCurrentIndex","getThumbnailStyle","verticalTranslateValue","getSlideItems","slideOnThumbnailOver","onClick","onTouchMove","onTouchEnd","onTouchStart","onMouseOver","onMouseLeave","showBullets","slides","bullets","forEach","item","originalClass","thumbnailClass","handleRenderItem","handleRenderThumbInner","showItem","slide","handleSlideKeyUp","shouldPushSlideOnInfiniteMode","push","igThumbnailClass","active","handleThumbnailMouseOver","handleThumbnailKeyUp","bulletOnClick","itemIndex","call","igBulletClass","bulletClass","ignoreIsTransitioning","slidingMoreThanOneSlideLeftOrRight","Math","abs","notGoingFromFirstToLast","notGoingFromLastToFirst","isFirstOrLastSlide","isLastSlide","isFirstSlide","slideIsTransitioning","indexIsNotPreviousOrNextSlide","scroll","canSlide","canSlideLeft","canSlideNext","canSlidePrevious","canSlideRight","absX","disableSwipe","stopPropagation","swipingTransitionDuration","side","swipingTransition","transition","sufficientSwipe","swipeThreshold","velocity","flickThreshold","swipeDirection","isSwipeUpOrDown","isLeftRightFlick","handleOnSwipedTo","slideTo","classList","add","disableKeyDown","useBrowserFullscreen","remove","LEFT_ARROW","RIGHT_ARROW","ESC_KEY","exitFullScreen","onErrorImageURL","src","indexOf","resizeObserver","unobserve","offsetWidth","offsetHeight","element","entries","observe","fullScreen","fullScreenElement","document","fullscreenElement","msFullscreenElement","mozFullScreenElement","webkitFullscreenElement","onBeforeSlide","slideCount","nextIndex","slideNext","slidePrevious","eventName","gallery","requestFullscreen","msRequestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","exitFullscreen","webkitExitFullscreen","mozCancelFullScreen","msExitFullscreen","shouldCallOnPlay","onPlay","setInterval","max","shouldCallOnPause","onPause","isImageLoaded","imageExists","original","handleImageLoaded","onImageLoad","onImageError","itemSrc","fullscreen","imageSet","map","source","type","originalAlt","originalHeight","originalWidth","sizes","originalTitle","description","onThumbnailError","handleThumbnailError","thumbnail","thumbnailHeight","thumbnailWidth","thumbnailAlt","thumbnailTitle","thumbnailLabel","render","additionalClass","indexSeparator","renderFullscreenButton","renderCustomControls","renderLeftNav","renderRightNav","showFullscreenButton","showIndex","showNav","showPlayButton","renderPlayPauseButton","thumbnailStyle","slideWrapperClass","slideWrapper","igClass","igContentClass","thumbnailWrapperClass","propTypes","isRequired","defaultProps","disabled"],"mappings":"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","sourcesContent":["import clsx from 'clsx';\r\nimport React from 'react';\r\nimport throttle from 'lodash.throttle';\r\nimport debounce from 'lodash.debounce';\r\nimport isEqual from 'lodash.isequal';\r\nimport ResizeObserver from 'resize-observer-polyfill';\r\nimport {\r\n  LEFT,\r\n  RIGHT,\r\n  UP,\r\n  DOWN,\r\n} from 'react-swipeable';\r\nimport {\r\n  arrayOf,\r\n  bool,\r\n  func,\r\n  number,\r\n  oneOf,\r\n  shape,\r\n  string,\r\n} from 'prop-types';\r\nimport SVG from './SVG';\r\nimport SwipeWrapper from './SwipeWrapper';\r\n\r\nconst screenChangeEvents = [\r\n  'fullscreenchange',\r\n  'MSFullscreenChange',\r\n  'mozfullscreenchange',\r\n  'webkitfullscreenchange',\r\n];\r\n\r\nconst imageSetType = arrayOf(shape({\r\n  srcSet: string,\r\n  media: string,\r\n}));\r\n\r\nfunction isEnterOrSpaceKey(event) {\r\n  const key = parseInt(event.keyCode || event.which || 0, 10);\r\n  const ENTER_KEY_CODE = 66;\r\n  const SPACEBAR_KEY_CODE = 62;\r\n  return key === ENTER_KEY_CODE || key === SPACEBAR_KEY_CODE;\r\n}\r\n\r\nexport default class ImageGallery extends React.Component {\r\n  static propTypes = {\r\n    flickThreshold: number,\r\n    items: arrayOf(shape({\r\n      bulletClass: string,\r\n      bulletOnClick: func,\r\n      description: string,\r\n      original: string,\r\n      originalHeight: number,\r\n      originalWidth: number,\r\n      thumbnailHeight: number,\r\n      thumbnailWidth: number,\r\n      fullscreen: string,\r\n      originalAlt: string,\r\n      originalTitle: string,\r\n      thumbnail: string,\r\n      thumbnailAlt: string,\r\n      thumbnailLabel: string,\r\n      thumbnailTitle: string,\r\n      originalClass: string,\r\n      thumbnailClass: string,\r\n      renderItem: func,\r\n      renderThumbInner: func,\r\n      imageSet: imageSetType,\r\n      srcSet: string,\r\n      sizes: string,\r\n    })).isRequired,\r\n    showNav: bool,\r\n    autoPlay: bool,\r\n    lazyLoad: bool,\r\n    infinite: bool,\r\n    showIndex: bool,\r\n    showBullets: bool,\r\n    showThumbnails: bool,\r\n    showPlayButton: bool,\r\n    showFullscreenButton: bool,\r\n    disableThumbnailScroll: bool,\r\n    disableKeyDown: bool,\r\n    disableSwipe: bool,\r\n    useBrowserFullscreen: bool,\r\n    onErrorImageURL: string,\r\n    indexSeparator: string,\r\n    thumbnailPosition: oneOf(['top', 'bottom', 'left', 'right']),\r\n    startIndex: number,\r\n    slideDuration: number,\r\n    slideInterval: number,\r\n    slideOnThumbnailOver: bool,\r\n    swipeThreshold: number,\r\n    swipingTransitionDuration: number,\r\n    onSlide: func,\r\n    onBeforeSlide: func,\r\n    onScreenChange: func,\r\n    onPause: func,\r\n    onPlay: func,\r\n    onClick: func,\r\n    onImageLoad: func,\r\n    onImageError: func,\r\n    onTouchMove: func,\r\n    onTouchEnd: func,\r\n    onTouchStart: func,\r\n    onMouseOver: func,\r\n    onMouseLeave: func,\r\n    onThumbnailError: func,\r\n    onThumbnailClick: func,\r\n    renderCustomControls: func,\r\n    renderLeftNav: func,\r\n    renderRightNav: func,\r\n    renderPlayPauseButton: func,\r\n    renderFullscreenButton: func,\r\n    renderItem: func,\r\n    renderThumbInner: func,\r\n    stopPropagation: bool,\r\n    additionalClass: string,\r\n    useTranslate3D: bool,\r\n    isRTL: bool,\r\n    useWindowKeyDown: bool,\r\n  };\r\n\r\n  static defaultProps = {\r\n    onErrorImageURL: '',\r\n    additionalClass: '',\r\n    showNav: true,\r\n    autoPlay: false,\r\n    lazyLoad: false,\r\n    infinite: true,\r\n    showIndex: false,\r\n    showBullets: false,\r\n    showThumbnails: true,\r\n    showPlayButton: true,\r\n    showFullscreenButton: true,\r\n    disableThumbnailScroll: false,\r\n    disableKeyDown: false,\r\n    disableSwipe: false,\r\n    useTranslate3D: true,\r\n    isRTL: false,\r\n    useBrowserFullscreen: true,\r\n    flickThreshold: 0.4,\r\n    stopPropagation: false,\r\n    indexSeparator: ' / ',\r\n    thumbnailPosition: 'bottom',\r\n    startIndex: 0,\r\n    slideDuration: 450,\r\n    swipingTransitionDuration: 0,\r\n    onSlide: null,\r\n    onBeforeSlide: null,\r\n    onScreenChange: null,\r\n    onPause: null,\r\n    onPlay: null,\r\n    onClick: null,\r\n    onImageLoad: null,\r\n    onImageError: null,\r\n    onTouchMove: null,\r\n    onTouchEnd: null,\r\n    onTouchStart: null,\r\n    onMouseOver: null,\r\n    onMouseLeave: null,\r\n    onThumbnailError: null,\r\n    onThumbnailClick: null,\r\n    renderCustomControls: null,\r\n    renderThumbInner: null,\r\n    renderItem: null,\r\n    slideInterval: 3000,\r\n    slideOnThumbnailOver: false,\r\n    swipeThreshold: 30,\r\n    renderLeftNav: (onClick, disabled) => (\r\n      <button\r\n        type=\"button\"\r\n        className=\"image-gallery-icon image-gallery-left-nav\"\r\n        disabled={disabled}\r\n        onClick={onClick}\r\n        aria-label=\"Previous Slide\"\r\n      >\r\n        <SVG icon=\"left\" viewBox=\"6 0 12 24\" />\r\n      </button>\r\n    ),\r\n    renderRightNav: (onClick, disabled) => (\r\n      <button\r\n        type=\"button\"\r\n        className=\"image-gallery-icon image-gallery-right-nav\"\r\n        disabled={disabled}\r\n        onClick={onClick}\r\n        aria-label=\"Next Slide\"\r\n      >\r\n        <SVG icon=\"right\" viewBox=\"6 0 12 24\" />\r\n      </button>\r\n    ),\r\n    renderPlayPauseButton: (onClick, isPlaying) => (\r\n      <button\r\n        type=\"button\"\r\n        className=\"image-gallery-icon image-gallery-play-button\"\r\n        onClick={onClick}\r\n        aria-label=\"Play or Pause Slideshow\"\r\n      >\r\n        <SVG strokeWidth={2} icon={isPlaying ? 'pause' : 'play'} />\r\n      </button>\r\n    ),\r\n    renderFullscreenButton: (onClick, isFullscreen) => (\r\n      <button\r\n        type=\"button\"\r\n        className=\"image-gallery-icon image-gallery-fullscreen-button\"\r\n        onClick={onClick}\r\n        aria-label=\"Open Fullscreen\"\r\n      >\r\n        <SVG strokeWidth={2} icon={isFullscreen ? 'minimize' : 'maximize'} />\r\n      </button>\r\n    ),\r\n    useWindowKeyDown: true,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentIndex: props.startIndex,\r\n      thumbsTranslate: 0,\r\n      currentSlideOffset: 0,\r\n      galleryWidth: 0,\r\n      thumbnailsWrapperWidth: 0,\r\n      thumbnailsWrapperHeight: 0,\r\n      isFullscreen: false,\r\n      isPlaying: false,\r\n    };\r\n    this.loadedImages = {};\r\n    this.imageGallery = React.createRef();\r\n    this.thumbnailsWrapper = React.createRef();\r\n    this.thumbnails = React.createRef();\r\n    this.imageGallerySlideWrapper = React.createRef();\r\n\r\n    // bindings\r\n    this.handleKeyDown = this.handleKeyDown.bind(this);\r\n    this.handleMouseDown = this.handleMouseDown.bind(this);\r\n    this.handleOnSwiped = this.handleOnSwiped.bind(this);\r\n    this.handleScreenChange = this.handleScreenChange.bind(this);\r\n    this.handleSwiping = this.handleSwiping.bind(this);\r\n    this.onThumbnailMouseLeave = this.onThumbnailMouseLeave.bind(this);\r\n    this.handleImageError = this.handleImageError.bind(this);\r\n    this.pauseOrPlay = this.pauseOrPlay.bind(this);\r\n    this.renderThumbInner = this.renderThumbInner.bind(this);\r\n    this.renderItem = this.renderItem.bind(this);\r\n    this.slideLeft = this.slideLeft.bind(this);\r\n    this.slideRight = this.slideRight.bind(this);\r\n    this.toggleFullScreen = this.toggleFullScreen.bind(this);\r\n    this.togglePlay = this.togglePlay.bind(this);\r\n\r\n    // Used to update the throttle if slideDuration changes\r\n    this.unthrottledSlideToIndex = this.slideToIndex;\r\n    this.slideToIndex = throttle(\r\n      this.unthrottledSlideToIndex, props.slideDuration, { trailing: false },\r\n    );\r\n\r\n    if (props.lazyLoad) {\r\n      this.lazyLoaded = [];\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { autoPlay, useWindowKeyDown } = this.props;\r\n    if (autoPlay) {\r\n      this.play();\r\n    }\r\n    if (useWindowKeyDown) {\r\n      window.addEventListener('keydown', this.handleKeyDown);\r\n    } else {\r\n      this.imageGallery.current.addEventListener('keydown', this.handleKeyDown);\r\n    }\r\n    window.addEventListener('mousedown', this.handleMouseDown);\r\n    this.initResizeObserver(this.imageGallerySlideWrapper);\r\n    this.addScreenChangeEvent();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const {\r\n      items,\r\n      lazyLoad,\r\n      slideDuration,\r\n      slideInterval,\r\n      startIndex,\r\n      thumbnailPosition,\r\n      showThumbnails,\r\n      useWindowKeyDown,\r\n    } = this.props;\r\n    const { currentIndex } = this.state;\r\n    const itemsSizeChanged = prevProps.items.length !== items.length;\r\n    const itemsChanged = !isEqual(prevProps.items, items);\r\n    const startIndexUpdated = prevProps.startIndex !== startIndex;\r\n    const thumbnailsPositionChanged = prevProps.thumbnailPosition !== thumbnailPosition;\r\n    const showThumbnailsChanged = prevProps.showThumbnails !== showThumbnails;\r\n\r\n    if (slideInterval !== prevProps.slideInterval || slideDuration !== prevProps.slideDuration) {\r\n      // refresh setInterval\r\n      this.pause();\r\n      this.play();\r\n    }\r\n\r\n    if (thumbnailsPositionChanged) {\r\n      // re-initialize resizeObserver because slides was unmounted and mounted again\r\n      this.removeResizeObserver();\r\n      this.initResizeObserver(this.imageGallerySlideWrapper);\r\n    }\r\n\r\n    if (itemsSizeChanged || showThumbnailsChanged) {\r\n      this.handleResize();\r\n    }\r\n    if (prevState.currentIndex !== currentIndex) {\r\n      this.slideThumbnailBar(prevState.currentIndex);\r\n    }\r\n    // if slideDuration changes, update slideToIndex throttle\r\n    if (prevProps.slideDuration !== slideDuration) {\r\n      this.slideToIndex = throttle(\r\n        this.unthrottledSlideToIndex, slideDuration, { trailing: false },\r\n      );\r\n    }\r\n    if (lazyLoad && (!prevProps.lazyLoad || itemsChanged)) {\r\n      this.lazyLoaded = [];\r\n    }\r\n\r\n    if (useWindowKeyDown !== prevProps.useWindowKeyDown) {\r\n      if (useWindowKeyDown) {\r\n        this.imageGallery.current.removeEventListener('keydown', this.handleKeyDown);\r\n        window.addEventListener('keydown', this.handleKeyDown);\r\n      } else {\r\n        window.removeEventListener('keydown', this.handleKeyDown);\r\n        this.imageGallery.current.addEventListener('keydown', this.handleKeyDown);\r\n      }\r\n    }\r\n\r\n    if (startIndexUpdated || itemsChanged) {\r\n      // TODO: this should be fix/removed\r\n      this.setState({ currentIndex: startIndex });\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    const { useWindowKeyDown } = this.props;\r\n    window.removeEventListener('mousedown', this.handleMouseDown);\r\n    this.removeScreenChangeEvent();\r\n    this.removeResizeObserver();\r\n    if (this.playPauseIntervalId) {\r\n      window.clearInterval(this.playPauseIntervalId);\r\n      this.playPauseIntervalId = null;\r\n    }\r\n    if (this.transitionTimer) {\r\n      window.clearTimeout(this.transitionTimer);\r\n    }\r\n    if (useWindowKeyDown) {\r\n      window.removeEventListener('keydown', this.handleKeyDown);\r\n    } else {\r\n      this.imageGallery.current.removeEventListener('keydown', this.handleKeyDown);\r\n    }\r\n  }\r\n\r\n  onSliding() {\r\n    const { currentIndex, isTransitioning } = this.state;\r\n    const { onSlide, slideDuration } = this.props;\r\n    this.transitionTimer = window.setTimeout(() => {\r\n      if (isTransitioning) {\r\n        this.setState({ isTransitioning: !isTransitioning });\r\n        if (onSlide) {\r\n          onSlide(currentIndex);\r\n        }\r\n      }\r\n    }, slideDuration + 50);\r\n  }\r\n\r\n  onThumbnailClick(event, index) {\r\n    const { onThumbnailClick } = this.props;\r\n    // blur element to remove outline cause by focus\r\n    event.target.parentNode.parentNode.blur();\r\n    this.slideToIndex(index, event);\r\n    if (onThumbnailClick) {\r\n      onThumbnailClick(event, index);\r\n    }\r\n  }\r\n\r\n  onThumbnailMouseOver(event, index) {\r\n    if (this.thumbnailMouseOverTimer) {\r\n      window.clearTimeout(this.thumbnailMouseOverTimer);\r\n      this.thumbnailMouseOverTimer = null;\r\n    }\r\n    this.thumbnailMouseOverTimer = window.setTimeout(() => {\r\n      this.slideToIndex(index);\r\n      this.pause();\r\n    }, 300);\r\n  }\r\n\r\n  onThumbnailMouseLeave() {\r\n    if (this.thumbnailMouseOverTimer) {\r\n      const { autoPlay } = this.props;\r\n      window.clearTimeout(this.thumbnailMouseOverTimer);\r\n      this.thumbnailMouseOverTimer = null;\r\n      if (autoPlay) {\r\n        this.play();\r\n      }\r\n    }\r\n  }\r\n\r\n  setScrollDirection(dir) {\r\n    const { scrollingUpDown, scrollingLeftRight } = this.state;\r\n\r\n    if (!scrollingUpDown && !scrollingLeftRight) {\r\n      if (dir === LEFT || dir === RIGHT) {\r\n        this.setState({ scrollingLeftRight: true });\r\n      } else {\r\n        this.setState({ scrollingUpDown: true });\r\n      }\r\n    }\r\n  }\r\n\r\n  setThumbsTranslate(thumbsTranslate) {\r\n    this.setState({ thumbsTranslate });\r\n  }\r\n\r\n  setModalFullscreen(state) {\r\n    const { onScreenChange } = this.props;\r\n    this.setState({ modalFullscreen: state });\r\n    // manually call because browser does not support screenchange events\r\n    if (onScreenChange) {\r\n      onScreenChange(state);\r\n    }\r\n  }\r\n\r\n  getThumbsTranslate(indexDifference) {\r\n    const { disableThumbnailScroll, items } = this.props;\r\n    const { thumbnailsWrapperWidth, thumbnailsWrapperHeight } = this.state;\r\n    let totalScroll;\r\n    const thumbElement = this.thumbnails && this.thumbnails.current;\r\n\r\n    if (disableThumbnailScroll) return 0;\r\n\r\n    if (thumbElement) {\r\n      // total scroll required to see the last thumbnail\r\n      if (this.isThumbnailVertical()) {\r\n        if (thumbElement.scrollHeight <= thumbnailsWrapperHeight) {\r\n          return 0;\r\n        }\r\n        totalScroll = thumbElement.scrollHeight - thumbnailsWrapperHeight;\r\n      } else {\r\n        if (thumbElement.scrollWidth <= thumbnailsWrapperWidth || thumbnailsWrapperWidth <= 0) {\r\n          return 0;\r\n        }\r\n        totalScroll = thumbElement.scrollWidth - thumbnailsWrapperWidth;\r\n      }\r\n      // scroll-x required per index change\r\n      const perIndexScroll = totalScroll / (items.length - 1);\r\n      return indexDifference * perIndexScroll;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  getAlignmentClassName(index) {\r\n    // Necessary for lazing loading\r\n    const { currentIndex } = this.state;\r\n    const { infinite, items } = this.props;\r\n    let alignment = '';\r\n    const leftClassName = 'left';\r\n    const centerClassName = 'center';\r\n    const rightClassName = 'right';\r\n\r\n    switch (index) {\r\n      case (currentIndex - 1):\r\n        alignment = ` ${leftClassName}`;\r\n        break;\r\n      case (currentIndex):\r\n        alignment = ` ${centerClassName}`;\r\n        break;\r\n      case (currentIndex + 1):\r\n        alignment = ` ${rightClassName}`;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    if (items.length >= 3 && infinite) {\r\n      if (index === 0 && currentIndex === items.length - 1) {\r\n        // set first slide as right slide if were sliding right from last slide\r\n        alignment = ` ${rightClassName}`;\r\n      } else if (index === items.length - 1 && currentIndex === 0) {\r\n        // set last slide as left slide if were sliding left from first slide\r\n        alignment = ` ${leftClassName}`;\r\n      }\r\n    }\r\n\r\n    return alignment;\r\n  }\r\n\r\n  getTranslateXForTwoSlide(index) {\r\n    // For taking care of infinite swipe when there are only two slides\r\n    const { currentIndex, currentSlideOffset, previousIndex } = this.state;\r\n    const indexChanged = currentIndex !== previousIndex;\r\n    const firstSlideWasPrevSlide = index === 0 && previousIndex === 0;\r\n    const secondSlideWasPrevSlide = index === 1 && previousIndex === 1;\r\n    const firstSlideIsNextSlide = index === 0 && currentIndex === 1;\r\n    const secondSlideIsNextSlide = index === 1 && currentIndex === 0;\r\n    const swipingEnded = currentSlideOffset === 0;\r\n    const baseTranslateX = -100 * currentIndex;\r\n    let translateX = baseTranslateX + (index * 100) + currentSlideOffset;\r\n\r\n    // keep track of user swiping direction\r\n    // important to understand how to translateX based on last direction\r\n    if (currentSlideOffset > 0) {\r\n      this.direction = 'left';\r\n    } else if (currentSlideOffset < 0) {\r\n      this.direction = 'right';\r\n    }\r\n\r\n\r\n    // when swiping between two slides make sure the next and prev slides\r\n    // are on both left and right\r\n    if (secondSlideIsNextSlide && currentSlideOffset > 0) { // swiping right\r\n      translateX = -100 + currentSlideOffset;\r\n    }\r\n    if (firstSlideIsNextSlide && currentSlideOffset < 0) { // swiping left\r\n      translateX = 100 + currentSlideOffset;\r\n    }\r\n\r\n    if (indexChanged) {\r\n      // when indexChanged move the slide to the correct side\r\n      if (firstSlideWasPrevSlide && swipingEnded && this.direction === 'left') {\r\n        translateX = 100;\r\n      } else if (secondSlideWasPrevSlide && swipingEnded && this.direction === 'right') {\r\n        translateX = -100;\r\n      }\r\n    } else {\r\n      // keep the slide on the correct side if the swipe was not successful\r\n      if (secondSlideIsNextSlide && swipingEnded && this.direction === 'left') {\r\n        translateX = -100;\r\n      }\r\n      if (firstSlideIsNextSlide && swipingEnded && this.direction === 'right') {\r\n        translateX = 100;\r\n      }\r\n    }\r\n\r\n    return translateX;\r\n  }\r\n\r\n  getThumbnailBarHeight() {\r\n    if (this.isThumbnailVertical()) {\r\n      const { gallerySlideWrapperHeight } = this.state;\r\n      return { height: gallerySlideWrapperHeight };\r\n    }\r\n    return {};\r\n  }\r\n\r\n  getSlideStyle(index) {\r\n    const { currentIndex, currentSlideOffset, slideStyle } = this.state;\r\n    const {\r\n      infinite,\r\n      items,\r\n      useTranslate3D,\r\n      isRTL,\r\n    } = this.props;\r\n    const baseTranslateX = -100 * currentIndex;\r\n    const totalSlides = items.length - 1;\r\n\r\n    // calculates where the other slides belong based on currentIndex\r\n    // if it is RTL the base line should be reversed\r\n    let translateX = (baseTranslateX + (index * 100)) * (isRTL ? -1 : 1) + currentSlideOffset;\r\n\r\n    if (infinite && items.length > 2) {\r\n      if (currentIndex === 0 && index === totalSlides) {\r\n        // make the last slide the slide before the first\r\n        // if it is RTL the base line should be reversed\r\n        translateX = -100 * (isRTL ? -1 : 1) + currentSlideOffset;\r\n      } else if (currentIndex === totalSlides && index === 0) {\r\n        // make the first slide the slide after the last\r\n        // if it is RTL the base line should be reversed\r\n        translateX = 100 * (isRTL ? -1 : 1) + currentSlideOffset;\r\n      }\r\n    }\r\n\r\n    // Special case when there are only 2 items with infinite on\r\n    if (infinite && items.length === 2) {\r\n      translateX = this.getTranslateXForTwoSlide(index);\r\n    }\r\n\r\n    let translate = `translate(${translateX}%, 0)`;\r\n\r\n    if (useTranslate3D) {\r\n      translate = `translate3d(${translateX}%, 0, 0)`;\r\n    }\r\n\r\n    return Object.assign({}, {\r\n      WebkitTransform: translate,\r\n      MozTransform: translate,\r\n      msTransform: translate,\r\n      OTransform: translate,\r\n      transform: translate,\r\n    }, slideStyle);\r\n  }\r\n\r\n  getCurrentIndex() {\r\n    const { currentIndex } = this.state;\r\n    return currentIndex;\r\n  }\r\n\r\n  getThumbnailStyle() {\r\n    let translate;\r\n    const { useTranslate3D, isRTL } = this.props;\r\n    const { thumbsTranslate } = this.state;\r\n    const verticalTranslateValue = isRTL ? thumbsTranslate * -1 : thumbsTranslate;\r\n\r\n    if (this.isThumbnailVertical()) {\r\n      translate = `translate(0, ${thumbsTranslate}px)`;\r\n      if (useTranslate3D) {\r\n        translate = `translate3d(0, ${thumbsTranslate}px, 0)`;\r\n      }\r\n    } else {\r\n      translate = `translate(${verticalTranslateValue}px, 0)`;\r\n      if (useTranslate3D) {\r\n        translate = `translate3d(${verticalTranslateValue}px, 0, 0)`;\r\n      }\r\n    }\r\n    return {\r\n      WebkitTransform: translate,\r\n      MozTransform: translate,\r\n      msTransform: translate,\r\n      OTransform: translate,\r\n      transform: translate,\r\n    };\r\n  }\r\n\r\n  getSlideItems() {\r\n    const { currentIndex } = this.state;\r\n    const {\r\n      infinite,\r\n      items,\r\n      slideOnThumbnailOver,\r\n      onClick,\r\n      lazyLoad,\r\n      onTouchMove,\r\n      onTouchEnd,\r\n      onTouchStart,\r\n      onMouseOver,\r\n      onMouseLeave,\r\n      renderItem,\r\n      renderThumbInner,\r\n      showThumbnails,\r\n      showBullets,\r\n    } = this.props;\r\n\r\n    const slides = [];\r\n    const thumbnails = [];\r\n    const bullets = [];\r\n\r\n    items.forEach((item, index) => {\r\n      const alignment = this.getAlignmentClassName(index);\r\n      const originalClass = item.originalClass ? ` ${item.originalClass}` : '';\r\n      const thumbnailClass = item.thumbnailClass ? ` ${item.thumbnailClass}` : '';\r\n      const handleRenderItem = item.renderItem || renderItem || this.renderItem;\r\n      const handleRenderThumbInner = item.renderThumbInner\r\n        || renderThumbInner || this.renderThumbInner;\r\n\r\n      const showItem = !lazyLoad || alignment || this.lazyLoaded[index];\r\n      if (showItem && lazyLoad && !this.lazyLoaded[index]) {\r\n        this.lazyLoaded[index] = true;\r\n      }\r\n\r\n      const slideStyle = this.getSlideStyle(index);\r\n\r\n      const slide = (\r\n        <div\r\n          aria-label={`Go to Slide ${index + 1}`}\r\n          key={`slide-${index}`}\r\n          tabIndex=\"-1\"\r\n          className={`image-gallery-slide ${alignment} ${originalClass}`}\r\n          style={slideStyle}\r\n          onClick={onClick}\r\n          onKeyUp={this.handleSlideKeyUp}\r\n          onTouchMove={onTouchMove}\r\n          onTouchEnd={onTouchEnd}\r\n          onTouchStart={onTouchStart}\r\n          onMouseOver={onMouseOver}\r\n          onFocus={onMouseOver}\r\n          onMouseLeave={onMouseLeave}\r\n          role=\"button\"\r\n        >\r\n          {showItem ? handleRenderItem(item) : <div style={{ height: '100%' }} />}\r\n        </div>\r\n      );\r\n\r\n      if (infinite) {\r\n        // don't add some slides while transitioning to avoid background transitions\r\n        if (this.shouldPushSlideOnInfiniteMode(index)) {\r\n          slides.push(slide);\r\n        }\r\n      } else {\r\n        slides.push(slide);\r\n      }\r\n\r\n      if (showThumbnails) {\r\n        const igThumbnailClass = clsx(\r\n          'image-gallery-thumbnail',\r\n          thumbnailClass,\r\n          { active: currentIndex === index },\r\n        );\r\n        thumbnails.push(\r\n          <button\r\n            key={`thumbnail-${index}`}\r\n            type=\"button\"\r\n            tabIndex=\"0\"\r\n            aria-pressed={currentIndex === index ? 'true' : 'false'}\r\n            aria-label={`Go to Slide ${index + 1}`}\r\n            className={igThumbnailClass}\r\n            onMouseLeave={slideOnThumbnailOver ? this.onThumbnailMouseLeave : null}\r\n            onMouseOver={event => this.handleThumbnailMouseOver(event, index)}\r\n            onFocus={event => this.handleThumbnailMouseOver(event, index)}\r\n            onKeyUp={event => this.handleThumbnailKeyUp(event, index)}\r\n            onClick={event => this.onThumbnailClick(event, index)}\r\n          >\r\n            {handleRenderThumbInner(item)}\r\n          </button>,\r\n        );\r\n      }\r\n\r\n      if (showBullets) {\r\n        // generate bullet elements and store them in array\r\n        const bulletOnClick = (event) => {\r\n          if (item.bulletOnClick) {\r\n            item.bulletOnClick({ item, itemIndex: index, currentIndex });\r\n          }\r\n          // blur element to remove outline cause by focus\r\n          event.target.blur();\r\n          return this.slideToIndex.call(this, index, event);\r\n        };\r\n        const igBulletClass = clsx(\r\n          'image-gallery-bullet',\r\n          item.bulletClass,\r\n          { active: currentIndex === index },\r\n        );\r\n        bullets.push(\r\n          <button\r\n            type=\"button\"\r\n            key={`bullet-${index}`}\r\n            className={igBulletClass}\r\n            onClick={bulletOnClick}\r\n            aria-pressed={currentIndex === index ? 'true' : 'false'}\r\n            aria-label={`Go to Slide ${index + 1}`}\r\n          />,\r\n        );\r\n      }\r\n    });\r\n\r\n    return {\r\n      slides,\r\n      thumbnails,\r\n      bullets,\r\n    };\r\n  }\r\n\r\n  ignoreIsTransitioning() {\r\n    /*\r\n      Ignore isTransitioning because were not going to sibling slides\r\n      e.g. center to left or center to right\r\n    */\r\n    const { items } = this.props;\r\n    const { previousIndex, currentIndex } = this.state;\r\n    const totalSlides = items.length - 1;\r\n    // we want to show the in between slides transition\r\n    const slidingMoreThanOneSlideLeftOrRight = Math.abs(previousIndex - currentIndex) > 1;\r\n    const notGoingFromFirstToLast = !(previousIndex === 0 && currentIndex === totalSlides);\r\n    const notGoingFromLastToFirst = !(previousIndex === totalSlides && currentIndex === 0);\r\n\r\n    return slidingMoreThanOneSlideLeftOrRight\r\n      && notGoingFromFirstToLast\r\n      && notGoingFromLastToFirst;\r\n  }\r\n\r\n  isFirstOrLastSlide(index) {\r\n    const { items } = this.props;\r\n    const totalSlides = items.length - 1;\r\n    const isLastSlide = index === totalSlides;\r\n    const isFirstSlide = index === 0;\r\n    return isLastSlide || isFirstSlide;\r\n  }\r\n\r\n\r\n  slideIsTransitioning(index) {\r\n    /*\r\n    returns true if the gallery is transitioning and the index is not the\r\n    previous or currentIndex\r\n    */\r\n    const { isTransitioning, previousIndex, currentIndex } = this.state;\r\n    const indexIsNotPreviousOrNextSlide = !(index === previousIndex || index === currentIndex);\r\n    return isTransitioning && indexIsNotPreviousOrNextSlide;\r\n  }\r\n\r\n  shouldPushSlideOnInfiniteMode(index) {\r\n    /*\r\n      Push (show) slide if slide is the current slide and the next slide\r\n      OR\r\n      The slide is going more than one slide left or right, but not going from\r\n      first to last and not going from last to first\r\n      Edge case:\r\n      If you go to the first or last slide, when they're\r\n      not left, or right of each other they will try to catch up in the background\r\n      so unless were going from first to last or vice versa we don't want the first\r\n      or last slide to show up during the transition\r\n    */\r\n    return !this.slideIsTransitioning(index)\r\n      || (this.ignoreIsTransitioning() && !this.isFirstOrLastSlide(index));\r\n  }\r\n\r\n  slideThumbnailBar(previousIndex) {\r\n    const { thumbsTranslate, currentIndex } = this.state;\r\n    if (currentIndex === 0) {\r\n      this.setThumbsTranslate(0);\r\n    } else {\r\n      const indexDifference = Math.abs(previousIndex - currentIndex);\r\n      const scroll = this.getThumbsTranslate(indexDifference);\r\n      if (scroll > 0) {\r\n        if (previousIndex < currentIndex) {\r\n          this.setThumbsTranslate(thumbsTranslate - scroll);\r\n        } else if (previousIndex > currentIndex) {\r\n          this.setThumbsTranslate(thumbsTranslate + scroll);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  canSlide() {\r\n    const { items } = this.props;\r\n    return items.length >= 2;\r\n  }\r\n\r\n  canSlideLeft() {\r\n    const { infinite, isRTL } = this.props;\r\n    return infinite || (isRTL ? this.canSlideNext() : this.canSlidePrevious());\r\n  }\r\n\r\n  canSlideRight() {\r\n    const { infinite, isRTL } = this.props;\r\n    return infinite || (isRTL ? this.canSlidePrevious() : this.canSlideNext());\r\n  }\r\n\r\n  canSlidePrevious() {\r\n    const { currentIndex } = this.state;\r\n    return currentIndex > 0;\r\n  }\r\n\r\n  canSlideNext() {\r\n    const { currentIndex } = this.state;\r\n    const { items } = this.props;\r\n    return currentIndex < items.length - 1;\r\n  }\r\n\r\n  handleSwiping({ event, absX, dir }) {\r\n    const { disableSwipe, stopPropagation } = this.props;\r\n    const {\r\n      galleryWidth,\r\n      isTransitioning,\r\n    } = this.state;\r\n\r\n    if (disableSwipe) return;\r\n\r\n    const { swipingTransitionDuration } = this.props;\r\n\r\n    this.setScrollDirection(dir);\r\n    if (stopPropagation) event.stopPropagation();\r\n\r\n    if (!isTransitioning) {\r\n      const side = dir === RIGHT ? 1 : -1;\r\n\r\n      let currentSlideOffset = (absX / galleryWidth * 100);\r\n      if (Math.abs(currentSlideOffset) >= 100) {\r\n        currentSlideOffset = 100;\r\n      }\r\n\r\n      const swipingTransition = {\r\n        transition: `transform ${swipingTransitionDuration}ms ease-out`,\r\n      };\r\n\r\n      this.setState({\r\n        currentSlideOffset: side * currentSlideOffset,\r\n        slideStyle: swipingTransition,\r\n      });\r\n    } else {\r\n      // don't move the slide\r\n      this.setState({ currentSlideOffset: 0 });\r\n    }\r\n  }\r\n\r\n  sufficientSwipe() {\r\n    const { currentSlideOffset } = this.state;\r\n    const { swipeThreshold } = this.props;\r\n    return Math.abs(currentSlideOffset) > swipeThreshold;\r\n  }\r\n\r\n  handleOnSwiped({ event, dir, velocity }) {\r\n    const { disableSwipe, stopPropagation, flickThreshold } = this.props;\r\n    const { scrollingUpDown, scrollingLeftRight } = this.state;\r\n\r\n    if (disableSwipe) return;\r\n\r\n    const { isRTL } = this.props;\r\n    if (stopPropagation) event.stopPropagation();\r\n    if (scrollingUpDown) {\r\n      // user stopped scrollingUpDown\r\n      this.setState({ scrollingUpDown: false });\r\n    }\r\n\r\n    if (scrollingLeftRight) {\r\n      // user stopped scrollingLeftRight\r\n      this.setState({ scrollingLeftRight: false });\r\n    }\r\n\r\n    // if it is RTL the direction is reversed\r\n    const swipeDirection = (dir === LEFT ? 1 : -1) * (isRTL ? -1 : 1);\r\n    const isSwipeUpOrDown = dir === UP || dir === DOWN;\r\n    const isLeftRightFlick = (velocity > flickThreshold) && !isSwipeUpOrDown;\r\n    this.handleOnSwipedTo(swipeDirection, isLeftRightFlick);\r\n  }\r\n\r\n  handleOnSwipedTo(swipeDirection, isLeftRightFlick) {\r\n    const { currentIndex, isTransitioning } = this.state;\r\n    let slideTo = currentIndex;\r\n\r\n    if ((this.sufficientSwipe() || isLeftRightFlick) && !isTransitioning) {\r\n      // slideto the next/prev slide\r\n      slideTo += swipeDirection;\r\n    }\r\n\r\n    // If we can't swipe left or right, stay in the current index (noop)\r\n    if ((swipeDirection === -1 && !this.canSlideLeft())\r\n        || (swipeDirection === 1 && !this.canSlideRight())) {\r\n      slideTo = currentIndex;\r\n    }\r\n\r\n    this.unthrottledSlideToIndex(slideTo);\r\n  }\r\n\r\n  handleMouseDown() {\r\n    // keep track of mouse vs keyboard usage for a11y\r\n    this.imageGallery.current.classList.add('image-gallery-using-mouse');\r\n  }\r\n\r\n  handleKeyDown(event) {\r\n    const { disableKeyDown, useBrowserFullscreen } = this.props;\r\n    const { isFullscreen } = this.state;\r\n    // keep track of mouse vs keyboard usage for a11y\r\n    this.imageGallery.current.classList.remove('image-gallery-using-mouse');\r\n\r\n    if (disableKeyDown) return;\r\n    const LEFT_ARROW = 37;\r\n    const RIGHT_ARROW = 39;\r\n    const ESC_KEY = 27;\r\n    const key = parseInt(event.keyCode || event.which || 0, 10);\r\n\r\n    switch (key) {\r\n      case LEFT_ARROW:\r\n        if (this.canSlideLeft() && !this.playPauseIntervalId) {\r\n          this.slideLeft(event);\r\n        }\r\n        break;\r\n      case RIGHT_ARROW:\r\n        if (this.canSlideRight() && !this.playPauseIntervalId) {\r\n          this.slideRight(event);\r\n        }\r\n        break;\r\n      case ESC_KEY:\r\n        if (isFullscreen && !useBrowserFullscreen) {\r\n          this.exitFullScreen();\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  handleImageError(event) {\r\n    const { onErrorImageURL } = this.props;\r\n    if (onErrorImageURL && event.target.src.indexOf(onErrorImageURL) === -1) {\r\n      /* eslint-disable no-param-reassign */\r\n      event.target.src = onErrorImageURL;\r\n      /* eslint-enable no-param-reassign */\r\n    }\r\n  }\r\n\r\n  removeResizeObserver() {\r\n    if (this.resizeObserver\r\n        && this.imageGallerySlideWrapper && this.imageGallerySlideWrapper.current) {\r\n      this.resizeObserver.unobserve(this.imageGallerySlideWrapper.current);\r\n      this.resizeObserver = null;\r\n    }\r\n  }\r\n\r\n  handleResize() {\r\n    const { currentIndex } = this.state;\r\n\r\n    // if there is no resizeObserver, component has been unmounted\r\n    if (!this.resizeObserver) {\r\n      return;\r\n    }\r\n\r\n    if (this.imageGallery && this.imageGallery.current) {\r\n      this.setState({ galleryWidth: this.imageGallery.current.offsetWidth });\r\n    }\r\n\r\n    if (this.imageGallerySlideWrapper && this.imageGallerySlideWrapper.current) {\r\n      this.setState({\r\n        gallerySlideWrapperHeight: this.imageGallerySlideWrapper.current.offsetHeight,\r\n      });\r\n    }\r\n\r\n    if (this.thumbnailsWrapper && this.thumbnailsWrapper.current) {\r\n      if (this.isThumbnailVertical()) {\r\n        this.setState({ thumbnailsWrapperHeight: this.thumbnailsWrapper.current.offsetHeight });\r\n      } else {\r\n        this.setState({ thumbnailsWrapperWidth: this.thumbnailsWrapper.current.offsetWidth });\r\n      }\r\n    }\r\n\r\n    // Adjust thumbnail container when thumbnail width or height is adjusted\r\n    this.setThumbsTranslate(-this.getThumbsTranslate(currentIndex));\r\n  }\r\n\r\n  initResizeObserver(element) {\r\n    this.resizeObserver = new ResizeObserver(debounce((entries) => {\r\n      if (!entries) return;\r\n      entries.forEach(() => {\r\n        this.handleResize();\r\n      });\r\n    }, 300));\r\n    this.resizeObserver.observe(element.current);\r\n  }\r\n\r\n  toggleFullScreen() {\r\n    const { isFullscreen } = this.state;\r\n    if (isFullscreen) {\r\n      this.exitFullScreen();\r\n    } else {\r\n      this.fullScreen();\r\n    }\r\n  }\r\n\r\n  togglePlay() {\r\n    if (this.playPauseIntervalId) {\r\n      this.pause();\r\n    } else {\r\n      this.play();\r\n    }\r\n  }\r\n\r\n\r\n  handleScreenChange() {\r\n    /*\r\n      handles screen change events that the browser triggers e.g. esc key\r\n    */\r\n    const { onScreenChange, useBrowserFullscreen } = this.props;\r\n    const fullScreenElement = document.fullscreenElement\r\n      || document.msFullscreenElement\r\n      || document.mozFullScreenElement\r\n      || document.webkitFullscreenElement;\r\n\r\n    // check if screenchange element is the gallery\r\n    const isFullscreen = this.imageGallery.current === fullScreenElement;\r\n    if (onScreenChange) onScreenChange(isFullscreen);\r\n    if (useBrowserFullscreen) this.setState({ isFullscreen });\r\n  }\r\n\r\n  slideToIndex(index, event) {\r\n    const { currentIndex, isTransitioning } = this.state;\r\n    const { items, slideDuration, onBeforeSlide } = this.props;\r\n\r\n    if (!isTransitioning) {\r\n      if (event) {\r\n        if (this.playPauseIntervalId) {\r\n          // user triggered event while ImageGallery is playing, reset interval\r\n          this.pause(false);\r\n          this.play(false);\r\n        }\r\n      }\r\n\r\n      const slideCount = items.length - 1;\r\n      let nextIndex = index;\r\n      if (index < 0) {\r\n        nextIndex = slideCount;\r\n      } else if (index > slideCount) {\r\n        nextIndex = 0;\r\n      }\r\n\r\n      if (onBeforeSlide && nextIndex !== currentIndex) {\r\n        onBeforeSlide(nextIndex);\r\n      }\r\n\r\n      this.setState({\r\n        previousIndex: currentIndex,\r\n        currentIndex: nextIndex,\r\n        isTransitioning: nextIndex !== currentIndex,\r\n        currentSlideOffset: 0,\r\n        slideStyle: { transition: `all ${slideDuration}ms ease-out` },\r\n      }, this.onSliding);\r\n    }\r\n  }\r\n\r\n  slideLeft(event) {\r\n    const { isRTL } = this.props;\r\n    if (isRTL) {\r\n      this.slideNext(event);\r\n    } else {\r\n      this.slidePrevious(event);\r\n    }\r\n  }\r\n\r\n  slideRight(event) {\r\n    const { isRTL } = this.props;\r\n    if (isRTL) {\r\n      this.slidePrevious(event);\r\n    } else {\r\n      this.slideNext(event);\r\n    }\r\n  }\r\n\r\n  slidePrevious(event) {\r\n    const { currentIndex, currentSlideOffset, isTransitioning } = this.state;\r\n    const { items } = this.props;\r\n    const nextIndex = currentIndex - 1;\r\n\r\n    if (isTransitioning) return;\r\n\r\n    if (items.length === 2) {\r\n      /*\r\n        When there are only 2 slides fake a tiny swipe to get the slides\r\n        on the correct side for transitioning\r\n      */\r\n      this.setState({\r\n        currentSlideOffset: currentSlideOffset + 0.001, // this will reset once index changes\r\n        slideStyle: { transition: 'none' }, // move the slide over instantly\r\n      }, () => {\r\n        // add 25ms timeout to avoid delay in moving slides over\r\n        window.setTimeout(() => this.slideToIndex(nextIndex, event), 25);\r\n      });\r\n    } else {\r\n      this.slideToIndex(nextIndex, event);\r\n    }\r\n  }\r\n\r\n  slideNext(event) {\r\n    const { currentIndex, currentSlideOffset, isTransitioning } = this.state;\r\n    const { items } = this.props;\r\n    const nextIndex = currentIndex + 1;\r\n\r\n    if (isTransitioning) return;\r\n\r\n    if (items.length === 2) {\r\n      // same as above for 2 slides\r\n      this.setState({\r\n        currentSlideOffset: currentSlideOffset - 0.001,\r\n        slideStyle: { transition: 'none' },\r\n      }, () => {\r\n        window.setTimeout(() => this.slideToIndex(nextIndex, event), 25);\r\n      });\r\n    } else {\r\n      this.slideToIndex(nextIndex, event);\r\n    }\r\n  }\r\n\r\n  handleThumbnailMouseOver(event, index) {\r\n    const { slideOnThumbnailOver } = this.props;\r\n    if (slideOnThumbnailOver) this.onThumbnailMouseOver(event, index);\r\n  }\r\n\r\n  handleThumbnailKeyUp(event, index) {\r\n    // a11y support ^_^\r\n    if (isEnterOrSpaceKey(event)) this.onThumbnailClick(event, index);\r\n  }\r\n\r\n  handleSlideKeyUp(event) {\r\n    // a11y support ^_^\r\n    if (isEnterOrSpaceKey(event)) {\r\n      const { onClick } = this.props;\r\n      onClick(event);\r\n    }\r\n  }\r\n\r\n  isThumbnailVertical() {\r\n    const { thumbnailPosition } = this.props;\r\n    return thumbnailPosition === 'left' || thumbnailPosition === 'right';\r\n  }\r\n\r\n  addScreenChangeEvent() {\r\n    screenChangeEvents.forEach((eventName) => {\r\n      document.addEventListener(eventName, this.handleScreenChange);\r\n    });\r\n  }\r\n\r\n  removeScreenChangeEvent() {\r\n    screenChangeEvents.forEach((eventName) => {\r\n      document.removeEventListener(eventName, this.handleScreenChange);\r\n    });\r\n  }\r\n\r\n  fullScreen() {\r\n    const { useBrowserFullscreen } = this.props;\r\n    const gallery = this.imageGallery.current;\r\n    if (useBrowserFullscreen) {\r\n      if (gallery.requestFullscreen) {\r\n        gallery.requestFullscreen();\r\n      } else if (gallery.msRequestFullscreen) {\r\n        gallery.msRequestFullscreen();\r\n      } else if (gallery.mozRequestFullScreen) {\r\n        gallery.mozRequestFullScreen();\r\n      } else if (gallery.webkitRequestFullscreen) {\r\n        gallery.webkitRequestFullscreen();\r\n      } else {\r\n        // fallback to fullscreen modal for unsupported browsers\r\n        this.setModalFullscreen(true);\r\n      }\r\n    } else {\r\n      this.setModalFullscreen(true);\r\n    }\r\n    this.setState({ isFullscreen: true });\r\n  }\r\n\r\n  exitFullScreen() {\r\n    const { isFullscreen } = this.state;\r\n    const { useBrowserFullscreen } = this.props;\r\n    if (isFullscreen) {\r\n      if (useBrowserFullscreen) {\r\n        if (document.exitFullscreen) {\r\n          document.exitFullscreen();\r\n        } else if (document.webkitExitFullscreen) {\r\n          document.webkitExitFullscreen();\r\n        } else if (document.mozCancelFullScreen) {\r\n          document.mozCancelFullScreen();\r\n        } else if (document.msExitFullscreen) {\r\n          document.msExitFullscreen();\r\n        } else {\r\n          // fallback to fullscreen modal for unsupported browsers\r\n          this.setModalFullscreen(false);\r\n        }\r\n      } else {\r\n        this.setModalFullscreen(false);\r\n      }\r\n      this.setState({ isFullscreen: false });\r\n    }\r\n  }\r\n\r\n  pauseOrPlay() {\r\n    const { infinite } = this.props;\r\n    const { currentIndex } = this.state;\r\n    if (!infinite && !this.canSlideRight()) {\r\n      this.pause();\r\n    } else {\r\n      this.slideToIndex(currentIndex + 1);\r\n    }\r\n  }\r\n\r\n  play(shouldCallOnPlay = true) {\r\n    const {\r\n      onPlay,\r\n      slideInterval,\r\n      slideDuration,\r\n    } = this.props;\r\n    const { currentIndex } = this.state;\r\n    if (!this.playPauseIntervalId) {\r\n      this.setState({ isPlaying: true });\r\n      this.playPauseIntervalId = window.setInterval(\r\n        this.pauseOrPlay,\r\n        Math.max(slideInterval, slideDuration),\r\n      );\r\n      if (onPlay && shouldCallOnPlay) {\r\n        onPlay(currentIndex);\r\n      }\r\n    }\r\n  }\r\n\r\n  pause(shouldCallOnPause = true) {\r\n    const { onPause } = this.props;\r\n    const { currentIndex } = this.state;\r\n    if (this.playPauseIntervalId) {\r\n      window.clearInterval(this.playPauseIntervalId);\r\n      this.playPauseIntervalId = null;\r\n      this.setState({ isPlaying: false });\r\n      if (onPause && shouldCallOnPause) {\r\n        onPause(currentIndex);\r\n      }\r\n    }\r\n  }\r\n\r\n  isImageLoaded(item) {\r\n    /*\r\n      Keep track of images loaded so that onImageLoad prop is not\r\n      called multiple times when re-render the images\r\n    */\r\n    const imageExists = this.loadedImages[item.original];\r\n    if (imageExists) {\r\n      return true;\r\n    }\r\n    // add image as loaded\r\n    this.loadedImages[item.original] = true;\r\n    return false;\r\n  }\r\n\r\n  handleImageLoaded(event, item) {\r\n    const { onImageLoad } = this.props;\r\n    const imageExists = this.loadedImages[item.original];\r\n    if (!imageExists && onImageLoad) {\r\n      this.loadedImages[item.original] = true; // prevent from call again\r\n      // image just loaded, call onImageLoad\r\n      onImageLoad(event);\r\n    }\r\n  }\r\n\r\n  renderItem(item) {\r\n    const { isFullscreen } = this.state;\r\n    const { onImageError } = this.props;\r\n    const handleImageError = onImageError || this.handleImageError;\r\n    const itemSrc = isFullscreen ? (item.fullscreen || item.original) : item.original;\r\n\r\n    return (\r\n      <div>\r\n        {\r\n          item.imageSet ? (\r\n            <picture\r\n              onLoad={event => this.handleImageLoaded(event, item)}\r\n              onError={handleImageError}\r\n            >\r\n              {\r\n                item.imageSet.map((source, index) => (\r\n                  <source\r\n                    key={`media-${index}`}\r\n                    media={source.media}\r\n                    srcSet={source.srcSet}\r\n                    type={source.type}\r\n                  />\r\n                ))\r\n              }\r\n              <img\r\n                className=\"image-gallery-image\"\r\n                alt={item.originalAlt}\r\n                src={itemSrc}\r\n                height={item.originalHeight}\r\n                width={item.originalWidth}\r\n              />\r\n            </picture>\r\n          ) : (\r\n            <img\r\n              className=\"image-gallery-image\"\r\n              src={itemSrc}\r\n              alt={item.originalAlt}\r\n              srcSet={item.srcSet}\r\n              height={item.originalHeight}\r\n              width={item.originalWidth}\r\n              sizes={item.sizes}\r\n              title={item.originalTitle}\r\n              onLoad={event => this.handleImageLoaded(event, item)}\r\n              onError={handleImageError}\r\n            />\r\n          )\r\n        }\r\n\r\n        {\r\n          item.description && (\r\n            <span className=\"image-gallery-description\">\r\n              {item.description}\r\n            </span>\r\n          )\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderThumbInner(item) {\r\n    const { onThumbnailError } = this.props;\r\n    const handleThumbnailError = onThumbnailError || this.handleImageError;\r\n\r\n    return (\r\n      <span className=\"image-gallery-thumbnail-inner\">\r\n        <img\r\n          className=\"image-gallery-thumbnail-image\"\r\n          src={item.thumbnail}\r\n          height={item.thumbnailHeight}\r\n          width={item.thumbnailWidth}\r\n          alt={item.thumbnailAlt}\r\n          title={item.thumbnailTitle}\r\n          onError={handleThumbnailError}\r\n        />\r\n        {\r\n          item.thumbnailLabel && (\r\n            <div className=\"image-gallery-thumbnail-label\">\r\n              {item.thumbnailLabel}\r\n            </div>\r\n          )\r\n        }\r\n      </span>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      currentIndex,\r\n      isFullscreen,\r\n      modalFullscreen,\r\n      isPlaying,\r\n    } = this.state;\r\n\r\n    const {\r\n      additionalClass,\r\n      indexSeparator, // deprecate soon, and allow custom render\r\n      isRTL,\r\n      items,\r\n      thumbnailPosition,\r\n      renderFullscreenButton,\r\n      renderCustomControls,\r\n      renderLeftNav,\r\n      renderRightNav,\r\n      showBullets,\r\n      showFullscreenButton,\r\n      showIndex,\r\n      showThumbnails,\r\n      showNav,\r\n      showPlayButton,\r\n      renderPlayPauseButton,\r\n    } = this.props;\r\n\r\n    const thumbnailStyle = this.getThumbnailStyle();\r\n    const { slides, thumbnails, bullets } = this.getSlideItems();\r\n    const slideWrapperClass = clsx(\r\n      'image-gallery-slide-wrapper',\r\n      thumbnailPosition,\r\n      { 'image-gallery-rtl': isRTL },\r\n    );\r\n\r\n    const slideWrapper = (\r\n      <div ref={this.imageGallerySlideWrapper} className={slideWrapperClass}>\r\n        {renderCustomControls && renderCustomControls()}\r\n        {\r\n          this.canSlide() ? (\r\n            <React.Fragment>\r\n              {\r\n                showNav && (\r\n                  <React.Fragment>\r\n                    {renderLeftNav(this.slideLeft, !this.canSlideLeft())}\r\n                    {renderRightNav(this.slideRight, !this.canSlideRight())}\r\n                  </React.Fragment>\r\n                )\r\n              }\r\n              <SwipeWrapper\r\n                className=\"image-gallery-swipe\"\r\n                delta={0}\r\n                onSwiping={this.handleSwiping}\r\n                onSwiped={this.handleOnSwiped}\r\n              >\r\n                <div className=\"image-gallery-slides\">\r\n                  {slides}\r\n                </div>\r\n              </SwipeWrapper>\r\n            </React.Fragment>\r\n          ) : (\r\n            <div className=\"image-gallery-slides\">\r\n              {slides}\r\n            </div>\r\n          )\r\n        }\r\n        {showPlayButton && renderPlayPauseButton(this.togglePlay, isPlaying)}\r\n        {\r\n          showBullets && (\r\n            <div className=\"image-gallery-bullets\">\r\n              <div\r\n                className=\"image-gallery-bullets-container\"\r\n                role=\"navigation\"\r\n                aria-label=\"Bullet Navigation\"\r\n              >\r\n                {bullets}\r\n              </div>\r\n            </div>\r\n          )\r\n        }\r\n        {showFullscreenButton && renderFullscreenButton(this.toggleFullScreen, isFullscreen)}\r\n        {\r\n          showIndex && (\r\n            <div className=\"image-gallery-index\">\r\n              <span className=\"image-gallery-index-current\">\r\n                {currentIndex + 1}\r\n              </span>\r\n              <span className=\"image-gallery-index-separator\">\r\n                {indexSeparator}\r\n              </span>\r\n              <span className=\"image-gallery-index-total\">\r\n                {items.length}\r\n              </span>\r\n            </div>\r\n          )\r\n        }\r\n      </div>\r\n    );\r\n\r\n    const igClass = clsx('image-gallery', additionalClass, { 'fullscreen-modal': modalFullscreen });\r\n    const igContentClass = clsx('image-gallery-content', thumbnailPosition, { fullscreen: isFullscreen });\r\n    const thumbnailWrapperClass = clsx(\r\n      'image-gallery-thumbnails-wrapper',\r\n      thumbnailPosition,\r\n      { 'thumbnails-wrapper-rtl': !this.isThumbnailVertical() && isRTL },\r\n    );\r\n    return (\r\n      <div\r\n        ref={this.imageGallery}\r\n        className={igClass}\r\n        aria-live=\"polite\"\r\n      >\r\n        <div className={igContentClass}>\r\n          {(thumbnailPosition === 'bottom' || thumbnailPosition === 'right') && slideWrapper}\r\n          {\r\n            showThumbnails && (\r\n              <div className={thumbnailWrapperClass} style={this.getThumbnailBarHeight()}>\r\n                <div className=\"image-gallery-thumbnails\" ref={this.thumbnailsWrapper}>\r\n                  <div\r\n                    ref={this.thumbnails}\r\n                    className=\"image-gallery-thumbnails-container\"\r\n                    style={thumbnailStyle}\r\n                    aria-label=\"Thumbnail Navigation\"\r\n                  >\r\n                    {thumbnails}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )\r\n          }\r\n          {(thumbnailPosition === 'top' || thumbnailPosition === 'left') && slideWrapper}\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}